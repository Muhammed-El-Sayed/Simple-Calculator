
Simple_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000022ee  00002382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080007a  0080007a  0000239c  2**0
                  ALLOC
  3 .stab         00001698  00000000  00000000  0000239c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b09  00000000  00000000  00003a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000453d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000467d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000047ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006436  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007321  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000080d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008230  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000084bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008c8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 37       	cpi	r26, 0x7E	; 126
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 65 0b 	call	0x16ca	; 0x16ca <main>
      8a:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 08 10 	jmp	0x2010	; 0x2010 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e6       	ldi	r26, 0x6C	; 108
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 14 10 	jmp	0x2028	; 0x2028 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 30 10 	jmp	0x2060	; 0x2060 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 14 10 	jmp	0x2028	; 0x2028 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 30 10 	jmp	0x2060	; 0x2060 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 08 10 	jmp	0x2010	; 0x2010 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8c e6       	ldi	r24, 0x6C	; 108
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 14 10 	jmp	0x2028	; 0x2028 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 30 10 	jmp	0x2060	; 0x2060 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 14 10 	jmp	0x2028	; 0x2028 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 30 10 	jmp	0x2060	; 0x2060 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 14 10 	jmp	0x2028	; 0x2028 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 30 10 	jmp	0x2060	; 0x2060 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 18 10 	jmp	0x2030	; 0x2030 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 34 10 	jmp	0x2068	; 0x2068 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <KeyPad_getPressedKey+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     b50:	1a 82       	std	Y+2, r1	; 0x02
     b52:	4c c0       	rjmp	.+152    	; 0xbec <KeyPad_getPressedKey+0xa6>
		{
			/*
			 * each time only one of the column pins will be output and
			 * the rest will be input pins include the row pins
			 */
			KEYPAD_PORT_DIR = (0b00010000<<col);
     b54:	ea e3       	ldi	r30, 0x3A	; 58
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	80 e1       	ldi	r24, 0x10	; 16
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <KeyPad_getPressedKey+0x22>
     b64:	88 0f       	add	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	2a 95       	dec	r18
     b6a:	e2 f7       	brpl	.-8      	; 0xb64 <KeyPad_getPressedKey+0x1e>
     b6c:	80 83       	st	Z, r24

			/*
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
     b6e:	eb e3       	ldi	r30, 0x3B	; 59
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	8a 81       	ldd	r24, Y+2	; 0x02
     b74:	28 2f       	mov	r18, r24
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	80 e1       	ldi	r24, 0x10	; 16
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	02 2e       	mov	r0, r18
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <KeyPad_getPressedKey+0x3e>
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	0a 94       	dec	r0
     b86:	e2 f7       	brpl	.-8      	; 0xb80 <KeyPad_getPressedKey+0x3a>
     b88:	80 95       	com	r24
     b8a:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
     b8c:	19 82       	std	Y+1, r1	; 0x01
     b8e:	28 c0       	rjmp	.+80     	; 0xbe0 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */
     b90:	e9 e3       	ldi	r30, 0x39	; 57
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	88 2f       	mov	r24, r24
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	a9 01       	movw	r20, r18
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <KeyPad_getPressedKey+0x62>
     ba4:	55 95       	asr	r21
     ba6:	47 95       	ror	r20
     ba8:	8a 95       	dec	r24
     baa:	e2 f7       	brpl	.-8      	; 0xba4 <KeyPad_getPressedKey+0x5e>
     bac:	ca 01       	movw	r24, r20
     bae:	81 70       	andi	r24, 0x01	; 1
     bb0:	90 70       	andi	r25, 0x00	; 0
     bb2:	00 97       	sbiw	r24, 0x00	; 0
     bb4:	91 f4       	brne	.+36     	; 0xbda <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	88 2f       	mov	r24, r24
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	98 2f       	mov	r25, r24
     bc6:	8a 81       	ldd	r24, Y+2	; 0x02
     bc8:	89 0f       	add	r24, r25
     bca:	8f 5f       	subi	r24, 0xFF	; 255
     bcc:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <KeyPad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	cf 91       	pop	r28
     bd6:	df 91       	pop	r29
     bd8:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	8f 5f       	subi	r24, 0xFF	; 255
     bde:	89 83       	std	Y+1, r24	; 0x01
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	84 30       	cpi	r24, 0x04	; 4
     be4:	a8 f2       	brcs	.-86     	; 0xb90 <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     be6:	8a 81       	ldd	r24, Y+2	; 0x02
     be8:	8f 5f       	subi	r24, 0xFF	; 255
     bea:	8a 83       	std	Y+2, r24	; 0x02
     bec:	8a 81       	ldd	r24, Y+2	; 0x02
     bee:	84 30       	cpi	r24, 0x04	; 4
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <KeyPad_getPressedKey+0xae>
     bf2:	b0 cf       	rjmp	.-160    	; 0xb54 <KeyPad_getPressedKey+0xe>
     bf4:	ad cf       	rjmp	.-166    	; 0xb50 <KeyPad_getPressedKey+0xa>

00000bf6 <KeyPad_4x4_adjustKeyNumber>:
}

#elif (N_col == 4)

static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
     bf6:	df 93       	push	r29
     bf8:	cf 93       	push	r28
     bfa:	00 d0       	rcall	.+0      	; 0xbfc <KeyPad_4x4_adjustKeyNumber+0x6>
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <KeyPad_4x4_adjustKeyNumber+0x8>
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	3c 83       	std	Y+4, r19	; 0x04
     c0c:	2b 83       	std	Y+3, r18	; 0x03
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	9c 81       	ldd	r25, Y+4	; 0x04
     c12:	88 30       	cpi	r24, 0x08	; 8
     c14:	91 05       	cpc	r25, r1
     c16:	09 f4       	brne	.+2      	; 0xc1a <KeyPad_4x4_adjustKeyNumber+0x24>
     c18:	70 c0       	rjmp	.+224    	; 0xcfa <KeyPad_4x4_adjustKeyNumber+0x104>
     c1a:	2b 81       	ldd	r18, Y+3	; 0x03
     c1c:	3c 81       	ldd	r19, Y+4	; 0x04
     c1e:	29 30       	cpi	r18, 0x09	; 9
     c20:	31 05       	cpc	r19, r1
     c22:	5c f5       	brge	.+86     	; 0xc7a <KeyPad_4x4_adjustKeyNumber+0x84>
     c24:	8b 81       	ldd	r24, Y+3	; 0x03
     c26:	9c 81       	ldd	r25, Y+4	; 0x04
     c28:	84 30       	cpi	r24, 0x04	; 4
     c2a:	91 05       	cpc	r25, r1
     c2c:	09 f4       	brne	.+2      	; 0xc30 <KeyPad_4x4_adjustKeyNumber+0x3a>
     c2e:	59 c0       	rjmp	.+178    	; 0xce2 <KeyPad_4x4_adjustKeyNumber+0xec>
     c30:	2b 81       	ldd	r18, Y+3	; 0x03
     c32:	3c 81       	ldd	r19, Y+4	; 0x04
     c34:	25 30       	cpi	r18, 0x05	; 5
     c36:	31 05       	cpc	r19, r1
     c38:	9c f4       	brge	.+38     	; 0xc60 <KeyPad_4x4_adjustKeyNumber+0x6a>
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	9c 81       	ldd	r25, Y+4	; 0x04
     c3e:	82 30       	cpi	r24, 0x02	; 2
     c40:	91 05       	cpc	r25, r1
     c42:	09 f4       	brne	.+2      	; 0xc46 <KeyPad_4x4_adjustKeyNumber+0x50>
     c44:	48 c0       	rjmp	.+144    	; 0xcd6 <KeyPad_4x4_adjustKeyNumber+0xe0>
     c46:	2b 81       	ldd	r18, Y+3	; 0x03
     c48:	3c 81       	ldd	r19, Y+4	; 0x04
     c4a:	23 30       	cpi	r18, 0x03	; 3
     c4c:	31 05       	cpc	r19, r1
     c4e:	0c f0       	brlt	.+2      	; 0xc52 <KeyPad_4x4_adjustKeyNumber+0x5c>
     c50:	45 c0       	rjmp	.+138    	; 0xcdc <KeyPad_4x4_adjustKeyNumber+0xe6>
     c52:	8b 81       	ldd	r24, Y+3	; 0x03
     c54:	9c 81       	ldd	r25, Y+4	; 0x04
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	91 05       	cpc	r25, r1
     c5a:	09 f4       	brne	.+2      	; 0xc5e <KeyPad_4x4_adjustKeyNumber+0x68>
     c5c:	39 c0       	rjmp	.+114    	; 0xcd0 <KeyPad_4x4_adjustKeyNumber+0xda>
     c5e:	67 c0       	rjmp	.+206    	; 0xd2e <KeyPad_4x4_adjustKeyNumber+0x138>
     c60:	2b 81       	ldd	r18, Y+3	; 0x03
     c62:	3c 81       	ldd	r19, Y+4	; 0x04
     c64:	26 30       	cpi	r18, 0x06	; 6
     c66:	31 05       	cpc	r19, r1
     c68:	09 f4       	brne	.+2      	; 0xc6c <KeyPad_4x4_adjustKeyNumber+0x76>
     c6a:	41 c0       	rjmp	.+130    	; 0xcee <KeyPad_4x4_adjustKeyNumber+0xf8>
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	9c 81       	ldd	r25, Y+4	; 0x04
     c70:	87 30       	cpi	r24, 0x07	; 7
     c72:	91 05       	cpc	r25, r1
     c74:	0c f0       	brlt	.+2      	; 0xc78 <KeyPad_4x4_adjustKeyNumber+0x82>
     c76:	3e c0       	rjmp	.+124    	; 0xcf4 <KeyPad_4x4_adjustKeyNumber+0xfe>
     c78:	37 c0       	rjmp	.+110    	; 0xce8 <KeyPad_4x4_adjustKeyNumber+0xf2>
     c7a:	2b 81       	ldd	r18, Y+3	; 0x03
     c7c:	3c 81       	ldd	r19, Y+4	; 0x04
     c7e:	2c 30       	cpi	r18, 0x0C	; 12
     c80:	31 05       	cpc	r19, r1
     c82:	09 f4       	brne	.+2      	; 0xc86 <KeyPad_4x4_adjustKeyNumber+0x90>
     c84:	46 c0       	rjmp	.+140    	; 0xd12 <KeyPad_4x4_adjustKeyNumber+0x11c>
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	9c 81       	ldd	r25, Y+4	; 0x04
     c8a:	8d 30       	cpi	r24, 0x0D	; 13
     c8c:	91 05       	cpc	r25, r1
     c8e:	5c f4       	brge	.+22     	; 0xca6 <KeyPad_4x4_adjustKeyNumber+0xb0>
     c90:	2b 81       	ldd	r18, Y+3	; 0x03
     c92:	3c 81       	ldd	r19, Y+4	; 0x04
     c94:	2a 30       	cpi	r18, 0x0A	; 10
     c96:	31 05       	cpc	r19, r1
     c98:	b1 f1       	breq	.+108    	; 0xd06 <KeyPad_4x4_adjustKeyNumber+0x110>
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	9c 81       	ldd	r25, Y+4	; 0x04
     c9e:	8b 30       	cpi	r24, 0x0B	; 11
     ca0:	91 05       	cpc	r25, r1
     ca2:	a4 f5       	brge	.+104    	; 0xd0c <KeyPad_4x4_adjustKeyNumber+0x116>
     ca4:	2d c0       	rjmp	.+90     	; 0xd00 <KeyPad_4x4_adjustKeyNumber+0x10a>
     ca6:	2b 81       	ldd	r18, Y+3	; 0x03
     ca8:	3c 81       	ldd	r19, Y+4	; 0x04
     caa:	2e 30       	cpi	r18, 0x0E	; 14
     cac:	31 05       	cpc	r19, r1
     cae:	b9 f1       	breq	.+110    	; 0xd1e <KeyPad_4x4_adjustKeyNumber+0x128>
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	9c 81       	ldd	r25, Y+4	; 0x04
     cb4:	8e 30       	cpi	r24, 0x0E	; 14
     cb6:	91 05       	cpc	r25, r1
     cb8:	7c f1       	brlt	.+94     	; 0xd18 <KeyPad_4x4_adjustKeyNumber+0x122>
     cba:	2b 81       	ldd	r18, Y+3	; 0x03
     cbc:	3c 81       	ldd	r19, Y+4	; 0x04
     cbe:	2f 30       	cpi	r18, 0x0F	; 15
     cc0:	31 05       	cpc	r19, r1
     cc2:	79 f1       	breq	.+94     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x12c>
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	9c 81       	ldd	r25, Y+4	; 0x04
     cc8:	80 31       	cpi	r24, 0x10	; 16
     cca:	91 05       	cpc	r25, r1
     ccc:	69 f1       	breq	.+90     	; 0xd28 <KeyPad_4x4_adjustKeyNumber+0x132>
     cce:	2f c0       	rjmp	.+94     	; 0xd2e <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7;
     cd0:	97 e0       	ldi	r25, 0x07	; 7
     cd2:	9a 83       	std	Y+2, r25	; 0x02
     cd4:	2e c0       	rjmp	.+92     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8;
     cd6:	28 e0       	ldi	r18, 0x08	; 8
     cd8:	2a 83       	std	Y+2, r18	; 0x02
     cda:	2b c0       	rjmp	.+86     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9;
     cdc:	39 e0       	ldi	r19, 0x09	; 9
     cde:	3a 83       	std	Y+2, r19	; 0x02
     ce0:	28 c0       	rjmp	.+80     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '/'; // ASCII Code of /
     ce2:	8f e2       	ldi	r24, 0x2F	; 47
     ce4:	8a 83       	std	Y+2, r24	; 0x02
     ce6:	25 c0       	rjmp	.+74     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4;
     ce8:	94 e0       	ldi	r25, 0x04	; 4
     cea:	9a 83       	std	Y+2, r25	; 0x02
     cec:	22 c0       	rjmp	.+68     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
     cee:	25 e0       	ldi	r18, 0x05	; 5
     cf0:	2a 83       	std	Y+2, r18	; 0x02
     cf2:	1f c0       	rjmp	.+62     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6;
     cf4:	36 e0       	ldi	r19, 0x06	; 6
     cf6:	3a 83       	std	Y+2, r19	; 0x02
     cf8:	1c c0       	rjmp	.+56     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
     cfa:	8a e2       	ldi	r24, 0x2A	; 42
     cfc:	8a 83       	std	Y+2, r24	; 0x02
     cfe:	19 c0       	rjmp	.+50     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 9: return 1;
     d00:	91 e0       	ldi	r25, 0x01	; 1
     d02:	9a 83       	std	Y+2, r25	; 0x02
     d04:	16 c0       	rjmp	.+44     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2;
     d06:	22 e0       	ldi	r18, 0x02	; 2
     d08:	2a 83       	std	Y+2, r18	; 0x02
     d0a:	13 c0       	rjmp	.+38     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3;
     d0c:	33 e0       	ldi	r19, 0x03	; 3
     d0e:	3a 83       	std	Y+2, r19	; 0x02
     d10:	10 c0       	rjmp	.+32     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
     d12:	8d e2       	ldi	r24, 0x2D	; 45
     d14:	8a 83       	std	Y+2, r24	; 0x02
     d16:	0d c0       	rjmp	.+26     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
     d18:	9d e0       	ldi	r25, 0x0D	; 13
     d1a:	9a 83       	std	Y+2, r25	; 0x02
     d1c:	0a c0       	rjmp	.+20     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 14: return 0;
     d1e:	1a 82       	std	Y+2, r1	; 0x02
     d20:	08 c0       	rjmp	.+16     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
     d22:	2d e3       	ldi	r18, 0x3D	; 61
     d24:	2a 83       	std	Y+2, r18	; 0x02
     d26:	05 c0       	rjmp	.+10     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
     d28:	3b e2       	ldi	r19, 0x2B	; 43
     d2a:	3a 83       	std	Y+2, r19	; 0x02
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	8a 83       	std	Y+2, r24	; 0x02
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
     d4a:	a1 e3       	ldi	r26, 0x31	; 49
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e1 e3       	ldi	r30, 0x31	; 49
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	87 60       	ori	r24, 0x07	; 7
     d56:	8c 93       	st	X, r24
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
     d58:	e4 e3       	ldi	r30, 0x34	; 52
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	8f ef       	ldi	r24, 0xFF	; 255
     d5e:	80 83       	st	Z, r24
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
     d60:	88 e3       	ldi	r24, 0x38	; 56
     d62:	0e 94 bc 06 	call	0xd78	; 0xd78 <LCD_sendCommand>
	#endif

	LCD_sendCommand(CURSOR_OFF); /* cursor off */
     d66:	8c e0       	ldi	r24, 0x0C	; 12
     d68:	0e 94 bc 06 	call	0xd78	; 0xd78 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	0e 94 bc 06 	call	0xd78	; 0xd78 <LCD_sendCommand>
}
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	e9 97       	sbiw	r28, 0x39	; 57
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
     d8c:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
     d8e:	a2 e3       	ldi	r26, 0x32	; 50
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e2 e3       	ldi	r30, 0x32	; 50
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	8e 7f       	andi	r24, 0xFE	; 254
     d9a:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
     d9c:	a2 e3       	ldi	r26, 0x32	; 50
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e2 e3       	ldi	r30, 0x32	; 50
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8d 7f       	andi	r24, 0xFD	; 253
     da8:	8c 93       	st	X, r24
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	a0 e8       	ldi	r26, 0x80	; 128
     db0:	bf e3       	ldi	r27, 0x3F	; 63
     db2:	8d ab       	std	Y+53, r24	; 0x35
     db4:	9e ab       	std	Y+54, r25	; 0x36
     db6:	af ab       	std	Y+55, r26	; 0x37
     db8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dba:	6d a9       	ldd	r22, Y+53	; 0x35
     dbc:	7e a9       	ldd	r23, Y+54	; 0x36
     dbe:	8f a9       	ldd	r24, Y+55	; 0x37
     dc0:	98 ad       	ldd	r25, Y+56	; 0x38
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	4a e7       	ldi	r20, 0x7A	; 122
     dc8:	53 e4       	ldi	r21, 0x43	; 67
     dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dce:	dc 01       	movw	r26, r24
     dd0:	cb 01       	movw	r24, r22
     dd2:	89 ab       	std	Y+49, r24	; 0x31
     dd4:	9a ab       	std	Y+50, r25	; 0x32
     dd6:	ab ab       	std	Y+51, r26	; 0x33
     dd8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     dda:	69 a9       	ldd	r22, Y+49	; 0x31
     ddc:	7a a9       	ldd	r23, Y+50	; 0x32
     dde:	8b a9       	ldd	r24, Y+51	; 0x33
     de0:	9c a9       	ldd	r25, Y+52	; 0x34
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	40 e8       	ldi	r20, 0x80	; 128
     de8:	5f e3       	ldi	r21, 0x3F	; 63
     dea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dee:	88 23       	and	r24, r24
     df0:	2c f4       	brge	.+10     	; 0xdfc <LCD_sendCommand+0x84>
		__ticks = 1;
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	98 ab       	std	Y+48, r25	; 0x30
     df8:	8f a7       	std	Y+47, r24	; 0x2f
     dfa:	3f c0       	rjmp	.+126    	; 0xe7a <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
     dfc:	69 a9       	ldd	r22, Y+49	; 0x31
     dfe:	7a a9       	ldd	r23, Y+50	; 0x32
     e00:	8b a9       	ldd	r24, Y+51	; 0x33
     e02:	9c a9       	ldd	r25, Y+52	; 0x34
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	3f ef       	ldi	r19, 0xFF	; 255
     e08:	4f e7       	ldi	r20, 0x7F	; 127
     e0a:	57 e4       	ldi	r21, 0x47	; 71
     e0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e10:	18 16       	cp	r1, r24
     e12:	4c f5       	brge	.+82     	; 0xe66 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e14:	6d a9       	ldd	r22, Y+53	; 0x35
     e16:	7e a9       	ldd	r23, Y+54	; 0x36
     e18:	8f a9       	ldd	r24, Y+55	; 0x37
     e1a:	98 ad       	ldd	r25, Y+56	; 0x38
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	40 e2       	ldi	r20, 0x20	; 32
     e22:	51 e4       	ldi	r21, 0x41	; 65
     e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e28:	dc 01       	movw	r26, r24
     e2a:	cb 01       	movw	r24, r22
     e2c:	bc 01       	movw	r22, r24
     e2e:	cd 01       	movw	r24, r26
     e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	98 ab       	std	Y+48, r25	; 0x30
     e3a:	8f a7       	std	Y+47, r24	; 0x2f
     e3c:	0f c0       	rjmp	.+30     	; 0xe5c <LCD_sendCommand+0xe4>
     e3e:	89 e1       	ldi	r24, 0x19	; 25
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	9e a7       	std	Y+46, r25	; 0x2e
     e44:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e46:	8d a5       	ldd	r24, Y+45	; 0x2d
     e48:	9e a5       	ldd	r25, Y+46	; 0x2e
     e4a:	01 97       	sbiw	r24, 0x01	; 1
     e4c:	f1 f7       	brne	.-4      	; 0xe4a <LCD_sendCommand+0xd2>
     e4e:	9e a7       	std	Y+46, r25	; 0x2e
     e50:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e52:	8f a5       	ldd	r24, Y+47	; 0x2f
     e54:	98 a9       	ldd	r25, Y+48	; 0x30
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	98 ab       	std	Y+48, r25	; 0x30
     e5a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e5c:	8f a5       	ldd	r24, Y+47	; 0x2f
     e5e:	98 a9       	ldd	r25, Y+48	; 0x30
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	69 f7       	brne	.-38     	; 0xe3e <LCD_sendCommand+0xc6>
     e64:	14 c0       	rjmp	.+40     	; 0xe8e <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e66:	69 a9       	ldd	r22, Y+49	; 0x31
     e68:	7a a9       	ldd	r23, Y+50	; 0x32
     e6a:	8b a9       	ldd	r24, Y+51	; 0x33
     e6c:	9c a9       	ldd	r25, Y+52	; 0x34
     e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e72:	dc 01       	movw	r26, r24
     e74:	cb 01       	movw	r24, r22
     e76:	98 ab       	std	Y+48, r25	; 0x30
     e78:	8f a7       	std	Y+47, r24	; 0x2f
     e7a:	8f a5       	ldd	r24, Y+47	; 0x2f
     e7c:	98 a9       	ldd	r25, Y+48	; 0x30
     e7e:	9c a7       	std	Y+44, r25	; 0x2c
     e80:	8b a7       	std	Y+43, r24	; 0x2b
     e82:	8b a5       	ldd	r24, Y+43	; 0x2b
     e84:	9c a5       	ldd	r25, Y+44	; 0x2c
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	f1 f7       	brne	.-4      	; 0xe86 <LCD_sendCommand+0x10e>
     e8a:	9c a7       	std	Y+44, r25	; 0x2c
     e8c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
     e8e:	a2 e3       	ldi	r26, 0x32	; 50
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e2 e3       	ldi	r30, 0x32	; 50
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	84 60       	ori	r24, 0x04	; 4
     e9a:	8c 93       	st	X, r24
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	a0 e8       	ldi	r26, 0x80	; 128
     ea2:	bf e3       	ldi	r27, 0x3F	; 63
     ea4:	8f a3       	std	Y+39, r24	; 0x27
     ea6:	98 a7       	std	Y+40, r25	; 0x28
     ea8:	a9 a7       	std	Y+41, r26	; 0x29
     eaa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eac:	6f a1       	ldd	r22, Y+39	; 0x27
     eae:	78 a5       	ldd	r23, Y+40	; 0x28
     eb0:	89 a5       	ldd	r24, Y+41	; 0x29
     eb2:	9a a5       	ldd	r25, Y+42	; 0x2a
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	4a e7       	ldi	r20, 0x7A	; 122
     eba:	53 e4       	ldi	r21, 0x43	; 67
     ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	8b a3       	std	Y+35, r24	; 0x23
     ec6:	9c a3       	std	Y+36, r25	; 0x24
     ec8:	ad a3       	std	Y+37, r26	; 0x25
     eca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     ecc:	6b a1       	ldd	r22, Y+35	; 0x23
     ece:	7c a1       	ldd	r23, Y+36	; 0x24
     ed0:	8d a1       	ldd	r24, Y+37	; 0x25
     ed2:	9e a1       	ldd	r25, Y+38	; 0x26
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	40 e8       	ldi	r20, 0x80	; 128
     eda:	5f e3       	ldi	r21, 0x3F	; 63
     edc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ee0:	88 23       	and	r24, r24
     ee2:	2c f4       	brge	.+10     	; 0xeee <LCD_sendCommand+0x176>
		__ticks = 1;
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	9a a3       	std	Y+34, r25	; 0x22
     eea:	89 a3       	std	Y+33, r24	; 0x21
     eec:	3f c0       	rjmp	.+126    	; 0xf6c <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
     eee:	6b a1       	ldd	r22, Y+35	; 0x23
     ef0:	7c a1       	ldd	r23, Y+36	; 0x24
     ef2:	8d a1       	ldd	r24, Y+37	; 0x25
     ef4:	9e a1       	ldd	r25, Y+38	; 0x26
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	3f ef       	ldi	r19, 0xFF	; 255
     efa:	4f e7       	ldi	r20, 0x7F	; 127
     efc:	57 e4       	ldi	r21, 0x47	; 71
     efe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f02:	18 16       	cp	r1, r24
     f04:	4c f5       	brge	.+82     	; 0xf58 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f06:	6f a1       	ldd	r22, Y+39	; 0x27
     f08:	78 a5       	ldd	r23, Y+40	; 0x28
     f0a:	89 a5       	ldd	r24, Y+41	; 0x29
     f0c:	9a a5       	ldd	r25, Y+42	; 0x2a
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	40 e2       	ldi	r20, 0x20	; 32
     f14:	51 e4       	ldi	r21, 0x41	; 65
     f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	bc 01       	movw	r22, r24
     f20:	cd 01       	movw	r24, r26
     f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	9a a3       	std	Y+34, r25	; 0x22
     f2c:	89 a3       	std	Y+33, r24	; 0x21
     f2e:	0f c0       	rjmp	.+30     	; 0xf4e <LCD_sendCommand+0x1d6>
     f30:	89 e1       	ldi	r24, 0x19	; 25
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	98 a3       	std	Y+32, r25	; 0x20
     f36:	8f 8f       	std	Y+31, r24	; 0x1f
     f38:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f3a:	98 a1       	ldd	r25, Y+32	; 0x20
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <LCD_sendCommand+0x1c4>
     f40:	98 a3       	std	Y+32, r25	; 0x20
     f42:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f44:	89 a1       	ldd	r24, Y+33	; 0x21
     f46:	9a a1       	ldd	r25, Y+34	; 0x22
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	9a a3       	std	Y+34, r25	; 0x22
     f4c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f4e:	89 a1       	ldd	r24, Y+33	; 0x21
     f50:	9a a1       	ldd	r25, Y+34	; 0x22
     f52:	00 97       	sbiw	r24, 0x00	; 0
     f54:	69 f7       	brne	.-38     	; 0xf30 <LCD_sendCommand+0x1b8>
     f56:	14 c0       	rjmp	.+40     	; 0xf80 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f58:	6b a1       	ldd	r22, Y+35	; 0x23
     f5a:	7c a1       	ldd	r23, Y+36	; 0x24
     f5c:	8d a1       	ldd	r24, Y+37	; 0x25
     f5e:	9e a1       	ldd	r25, Y+38	; 0x26
     f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f64:	dc 01       	movw	r26, r24
     f66:	cb 01       	movw	r24, r22
     f68:	9a a3       	std	Y+34, r25	; 0x22
     f6a:	89 a3       	std	Y+33, r24	; 0x21
     f6c:	89 a1       	ldd	r24, Y+33	; 0x21
     f6e:	9a a1       	ldd	r25, Y+34	; 0x22
     f70:	9e 8f       	std	Y+30, r25	; 0x1e
     f72:	8d 8f       	std	Y+29, r24	; 0x1d
     f74:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f76:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	f1 f7       	brne	.-4      	; 0xf78 <LCD_sendCommand+0x200>
     f7c:	9e 8f       	std	Y+30, r25	; 0x1e
     f7e:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
     f80:	e5 e3       	ldi	r30, 0x35	; 53
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	89 ad       	ldd	r24, Y+57	; 0x39
     f86:	80 83       	st	Z, r24
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	a0 e8       	ldi	r26, 0x80	; 128
     f8e:	bf e3       	ldi	r27, 0x3F	; 63
     f90:	89 8f       	std	Y+25, r24	; 0x19
     f92:	9a 8f       	std	Y+26, r25	; 0x1a
     f94:	ab 8f       	std	Y+27, r26	; 0x1b
     f96:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f98:	69 8d       	ldd	r22, Y+25	; 0x19
     f9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	4a e7       	ldi	r20, 0x7A	; 122
     fa6:	53 e4       	ldi	r21, 0x43	; 67
     fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	8d 8b       	std	Y+21, r24	; 0x15
     fb2:	9e 8b       	std	Y+22, r25	; 0x16
     fb4:	af 8b       	std	Y+23, r26	; 0x17
     fb6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fb8:	6d 89       	ldd	r22, Y+21	; 0x15
     fba:	7e 89       	ldd	r23, Y+22	; 0x16
     fbc:	8f 89       	ldd	r24, Y+23	; 0x17
     fbe:	98 8d       	ldd	r25, Y+24	; 0x18
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	40 e8       	ldi	r20, 0x80	; 128
     fc6:	5f e3       	ldi	r21, 0x3F	; 63
     fc8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fcc:	88 23       	and	r24, r24
     fce:	2c f4       	brge	.+10     	; 0xfda <LCD_sendCommand+0x262>
		__ticks = 1;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	9c 8b       	std	Y+20, r25	; 0x14
     fd6:	8b 8b       	std	Y+19, r24	; 0x13
     fd8:	3f c0       	rjmp	.+126    	; 0x1058 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
     fda:	6d 89       	ldd	r22, Y+21	; 0x15
     fdc:	7e 89       	ldd	r23, Y+22	; 0x16
     fde:	8f 89       	ldd	r24, Y+23	; 0x17
     fe0:	98 8d       	ldd	r25, Y+24	; 0x18
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	3f ef       	ldi	r19, 0xFF	; 255
     fe6:	4f e7       	ldi	r20, 0x7F	; 127
     fe8:	57 e4       	ldi	r21, 0x47	; 71
     fea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fee:	18 16       	cp	r1, r24
     ff0:	4c f5       	brge	.+82     	; 0x1044 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff2:	69 8d       	ldd	r22, Y+25	; 0x19
     ff4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ff6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ff8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	40 e2       	ldi	r20, 0x20	; 32
    1000:	51 e4       	ldi	r21, 0x41	; 65
    1002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	bc 01       	movw	r22, r24
    100c:	cd 01       	movw	r24, r26
    100e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	9c 8b       	std	Y+20, r25	; 0x14
    1018:	8b 8b       	std	Y+19, r24	; 0x13
    101a:	0f c0       	rjmp	.+30     	; 0x103a <LCD_sendCommand+0x2c2>
    101c:	89 e1       	ldi	r24, 0x19	; 25
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	9a 8b       	std	Y+18, r25	; 0x12
    1022:	89 8b       	std	Y+17, r24	; 0x11
    1024:	89 89       	ldd	r24, Y+17	; 0x11
    1026:	9a 89       	ldd	r25, Y+18	; 0x12
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <LCD_sendCommand+0x2b0>
    102c:	9a 8b       	std	Y+18, r25	; 0x12
    102e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1030:	8b 89       	ldd	r24, Y+19	; 0x13
    1032:	9c 89       	ldd	r25, Y+20	; 0x14
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	9c 8b       	std	Y+20, r25	; 0x14
    1038:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    103a:	8b 89       	ldd	r24, Y+19	; 0x13
    103c:	9c 89       	ldd	r25, Y+20	; 0x14
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	69 f7       	brne	.-38     	; 0x101c <LCD_sendCommand+0x2a4>
    1042:	14 c0       	rjmp	.+40     	; 0x106c <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1044:	6d 89       	ldd	r22, Y+21	; 0x15
    1046:	7e 89       	ldd	r23, Y+22	; 0x16
    1048:	8f 89       	ldd	r24, Y+23	; 0x17
    104a:	98 8d       	ldd	r25, Y+24	; 0x18
    104c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	9c 8b       	std	Y+20, r25	; 0x14
    1056:	8b 8b       	std	Y+19, r24	; 0x13
    1058:	8b 89       	ldd	r24, Y+19	; 0x13
    105a:	9c 89       	ldd	r25, Y+20	; 0x14
    105c:	98 8b       	std	Y+16, r25	; 0x10
    105e:	8f 87       	std	Y+15, r24	; 0x0f
    1060:	8f 85       	ldd	r24, Y+15	; 0x0f
    1062:	98 89       	ldd	r25, Y+16	; 0x10
    1064:	01 97       	sbiw	r24, 0x01	; 1
    1066:	f1 f7       	brne	.-4      	; 0x1064 <LCD_sendCommand+0x2ec>
    1068:	98 8b       	std	Y+16, r25	; 0x10
    106a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    106c:	a2 e3       	ldi	r26, 0x32	; 50
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e2 e3       	ldi	r30, 0x32	; 50
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8b 7f       	andi	r24, 0xFB	; 251
    1078:	8c 93       	st	X, r24
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	a0 e8       	ldi	r26, 0x80	; 128
    1080:	bf e3       	ldi	r27, 0x3F	; 63
    1082:	8b 87       	std	Y+11, r24	; 0x0b
    1084:	9c 87       	std	Y+12, r25	; 0x0c
    1086:	ad 87       	std	Y+13, r26	; 0x0d
    1088:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    108a:	6b 85       	ldd	r22, Y+11	; 0x0b
    108c:	7c 85       	ldd	r23, Y+12	; 0x0c
    108e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1090:	9e 85       	ldd	r25, Y+14	; 0x0e
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	4a e7       	ldi	r20, 0x7A	; 122
    1098:	53 e4       	ldi	r21, 0x43	; 67
    109a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	8f 83       	std	Y+7, r24	; 0x07
    10a4:	98 87       	std	Y+8, r25	; 0x08
    10a6:	a9 87       	std	Y+9, r26	; 0x09
    10a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10aa:	6f 81       	ldd	r22, Y+7	; 0x07
    10ac:	78 85       	ldd	r23, Y+8	; 0x08
    10ae:	89 85       	ldd	r24, Y+9	; 0x09
    10b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e8       	ldi	r20, 0x80	; 128
    10b8:	5f e3       	ldi	r21, 0x3F	; 63
    10ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10be:	88 23       	and	r24, r24
    10c0:	2c f4       	brge	.+10     	; 0x10cc <LCD_sendCommand+0x354>
		__ticks = 1;
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	9e 83       	std	Y+6, r25	; 0x06
    10c8:	8d 83       	std	Y+5, r24	; 0x05
    10ca:	3f c0       	rjmp	.+126    	; 0x114a <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    10cc:	6f 81       	ldd	r22, Y+7	; 0x07
    10ce:	78 85       	ldd	r23, Y+8	; 0x08
    10d0:	89 85       	ldd	r24, Y+9	; 0x09
    10d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	3f ef       	ldi	r19, 0xFF	; 255
    10d8:	4f e7       	ldi	r20, 0x7F	; 127
    10da:	57 e4       	ldi	r21, 0x47	; 71
    10dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10e0:	18 16       	cp	r1, r24
    10e2:	4c f5       	brge	.+82     	; 0x1136 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e2       	ldi	r20, 0x20	; 32
    10f2:	51 e4       	ldi	r21, 0x41	; 65
    10f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	bc 01       	movw	r22, r24
    10fe:	cd 01       	movw	r24, r26
    1100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	9e 83       	std	Y+6, r25	; 0x06
    110a:	8d 83       	std	Y+5, r24	; 0x05
    110c:	0f c0       	rjmp	.+30     	; 0x112c <LCD_sendCommand+0x3b4>
    110e:	89 e1       	ldi	r24, 0x19	; 25
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	9c 83       	std	Y+4, r25	; 0x04
    1114:	8b 83       	std	Y+3, r24	; 0x03
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	9c 81       	ldd	r25, Y+4	; 0x04
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	f1 f7       	brne	.-4      	; 0x111a <LCD_sendCommand+0x3a2>
    111e:	9c 83       	std	Y+4, r25	; 0x04
    1120:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1122:	8d 81       	ldd	r24, Y+5	; 0x05
    1124:	9e 81       	ldd	r25, Y+6	; 0x06
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	9e 83       	std	Y+6, r25	; 0x06
    112a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	9e 81       	ldd	r25, Y+6	; 0x06
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	69 f7       	brne	.-38     	; 0x110e <LCD_sendCommand+0x396>
    1134:	14 c0       	rjmp	.+40     	; 0x115e <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1136:	6f 81       	ldd	r22, Y+7	; 0x07
    1138:	78 85       	ldd	r23, Y+8	; 0x08
    113a:	89 85       	ldd	r24, Y+9	; 0x09
    113c:	9a 85       	ldd	r25, Y+10	; 0x0a
    113e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1142:	dc 01       	movw	r26, r24
    1144:	cb 01       	movw	r24, r22
    1146:	9e 83       	std	Y+6, r25	; 0x06
    1148:	8d 83       	std	Y+5, r24	; 0x05
    114a:	8d 81       	ldd	r24, Y+5	; 0x05
    114c:	9e 81       	ldd	r25, Y+6	; 0x06
    114e:	9a 83       	std	Y+2, r25	; 0x02
    1150:	89 83       	std	Y+1, r24	; 0x01
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	9a 81       	ldd	r25, Y+2	; 0x02
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	f1 f7       	brne	.-4      	; 0x1156 <LCD_sendCommand+0x3de>
    115a:	9a 83       	std	Y+2, r25	; 0x02
    115c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    115e:	e9 96       	adiw	r28, 0x39	; 57
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	cd bf       	out	0x3d, r28	; 61
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	e9 97       	sbiw	r28, 0x39	; 57
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1186:	a2 e3       	ldi	r26, 0x32	; 50
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e2 e3       	ldi	r30, 0x32	; 50
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	81 60       	ori	r24, 0x01	; 1
    1192:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1194:	a2 e3       	ldi	r26, 0x32	; 50
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e2 e3       	ldi	r30, 0x32	; 50
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	8d 7f       	andi	r24, 0xFD	; 253
    11a0:	8c 93       	st	X, r24
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	a0 e8       	ldi	r26, 0x80	; 128
    11a8:	bf e3       	ldi	r27, 0x3F	; 63
    11aa:	8d ab       	std	Y+53, r24	; 0x35
    11ac:	9e ab       	std	Y+54, r25	; 0x36
    11ae:	af ab       	std	Y+55, r26	; 0x37
    11b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b2:	6d a9       	ldd	r22, Y+53	; 0x35
    11b4:	7e a9       	ldd	r23, Y+54	; 0x36
    11b6:	8f a9       	ldd	r24, Y+55	; 0x37
    11b8:	98 ad       	ldd	r25, Y+56	; 0x38
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	4a e7       	ldi	r20, 0x7A	; 122
    11c0:	53 e4       	ldi	r21, 0x43	; 67
    11c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	89 ab       	std	Y+49, r24	; 0x31
    11cc:	9a ab       	std	Y+50, r25	; 0x32
    11ce:	ab ab       	std	Y+51, r26	; 0x33
    11d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11d2:	69 a9       	ldd	r22, Y+49	; 0x31
    11d4:	7a a9       	ldd	r23, Y+50	; 0x32
    11d6:	8b a9       	ldd	r24, Y+51	; 0x33
    11d8:	9c a9       	ldd	r25, Y+52	; 0x34
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	40 e8       	ldi	r20, 0x80	; 128
    11e0:	5f e3       	ldi	r21, 0x3F	; 63
    11e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11e6:	88 23       	and	r24, r24
    11e8:	2c f4       	brge	.+10     	; 0x11f4 <LCD_displayCharacter+0x84>
		__ticks = 1;
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	98 ab       	std	Y+48, r25	; 0x30
    11f0:	8f a7       	std	Y+47, r24	; 0x2f
    11f2:	3f c0       	rjmp	.+126    	; 0x1272 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    11f4:	69 a9       	ldd	r22, Y+49	; 0x31
    11f6:	7a a9       	ldd	r23, Y+50	; 0x32
    11f8:	8b a9       	ldd	r24, Y+51	; 0x33
    11fa:	9c a9       	ldd	r25, Y+52	; 0x34
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	3f ef       	ldi	r19, 0xFF	; 255
    1200:	4f e7       	ldi	r20, 0x7F	; 127
    1202:	57 e4       	ldi	r21, 0x47	; 71
    1204:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1208:	18 16       	cp	r1, r24
    120a:	4c f5       	brge	.+82     	; 0x125e <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    120c:	6d a9       	ldd	r22, Y+53	; 0x35
    120e:	7e a9       	ldd	r23, Y+54	; 0x36
    1210:	8f a9       	ldd	r24, Y+55	; 0x37
    1212:	98 ad       	ldd	r25, Y+56	; 0x38
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	40 e2       	ldi	r20, 0x20	; 32
    121a:	51 e4       	ldi	r21, 0x41	; 65
    121c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	bc 01       	movw	r22, r24
    1226:	cd 01       	movw	r24, r26
    1228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	98 ab       	std	Y+48, r25	; 0x30
    1232:	8f a7       	std	Y+47, r24	; 0x2f
    1234:	0f c0       	rjmp	.+30     	; 0x1254 <LCD_displayCharacter+0xe4>
    1236:	89 e1       	ldi	r24, 0x19	; 25
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	9e a7       	std	Y+46, r25	; 0x2e
    123c:	8d a7       	std	Y+45, r24	; 0x2d
    123e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1240:	9e a5       	ldd	r25, Y+46	; 0x2e
    1242:	01 97       	sbiw	r24, 0x01	; 1
    1244:	f1 f7       	brne	.-4      	; 0x1242 <LCD_displayCharacter+0xd2>
    1246:	9e a7       	std	Y+46, r25	; 0x2e
    1248:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    124a:	8f a5       	ldd	r24, Y+47	; 0x2f
    124c:	98 a9       	ldd	r25, Y+48	; 0x30
    124e:	01 97       	sbiw	r24, 0x01	; 1
    1250:	98 ab       	std	Y+48, r25	; 0x30
    1252:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1254:	8f a5       	ldd	r24, Y+47	; 0x2f
    1256:	98 a9       	ldd	r25, Y+48	; 0x30
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	69 f7       	brne	.-38     	; 0x1236 <LCD_displayCharacter+0xc6>
    125c:	14 c0       	rjmp	.+40     	; 0x1286 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    125e:	69 a9       	ldd	r22, Y+49	; 0x31
    1260:	7a a9       	ldd	r23, Y+50	; 0x32
    1262:	8b a9       	ldd	r24, Y+51	; 0x33
    1264:	9c a9       	ldd	r25, Y+52	; 0x34
    1266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    126a:	dc 01       	movw	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	98 ab       	std	Y+48, r25	; 0x30
    1270:	8f a7       	std	Y+47, r24	; 0x2f
    1272:	8f a5       	ldd	r24, Y+47	; 0x2f
    1274:	98 a9       	ldd	r25, Y+48	; 0x30
    1276:	9c a7       	std	Y+44, r25	; 0x2c
    1278:	8b a7       	std	Y+43, r24	; 0x2b
    127a:	8b a5       	ldd	r24, Y+43	; 0x2b
    127c:	9c a5       	ldd	r25, Y+44	; 0x2c
    127e:	01 97       	sbiw	r24, 0x01	; 1
    1280:	f1 f7       	brne	.-4      	; 0x127e <LCD_displayCharacter+0x10e>
    1282:	9c a7       	std	Y+44, r25	; 0x2c
    1284:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1286:	a2 e3       	ldi	r26, 0x32	; 50
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e2 e3       	ldi	r30, 0x32	; 50
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	84 60       	ori	r24, 0x04	; 4
    1292:	8c 93       	st	X, r24
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	a0 e8       	ldi	r26, 0x80	; 128
    129a:	bf e3       	ldi	r27, 0x3F	; 63
    129c:	8f a3       	std	Y+39, r24	; 0x27
    129e:	98 a7       	std	Y+40, r25	; 0x28
    12a0:	a9 a7       	std	Y+41, r26	; 0x29
    12a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a4:	6f a1       	ldd	r22, Y+39	; 0x27
    12a6:	78 a5       	ldd	r23, Y+40	; 0x28
    12a8:	89 a5       	ldd	r24, Y+41	; 0x29
    12aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	4a e7       	ldi	r20, 0x7A	; 122
    12b2:	53 e4       	ldi	r21, 0x43	; 67
    12b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b8:	dc 01       	movw	r26, r24
    12ba:	cb 01       	movw	r24, r22
    12bc:	8b a3       	std	Y+35, r24	; 0x23
    12be:	9c a3       	std	Y+36, r25	; 0x24
    12c0:	ad a3       	std	Y+37, r26	; 0x25
    12c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12c4:	6b a1       	ldd	r22, Y+35	; 0x23
    12c6:	7c a1       	ldd	r23, Y+36	; 0x24
    12c8:	8d a1       	ldd	r24, Y+37	; 0x25
    12ca:	9e a1       	ldd	r25, Y+38	; 0x26
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	40 e8       	ldi	r20, 0x80	; 128
    12d2:	5f e3       	ldi	r21, 0x3F	; 63
    12d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12d8:	88 23       	and	r24, r24
    12da:	2c f4       	brge	.+10     	; 0x12e6 <LCD_displayCharacter+0x176>
		__ticks = 1;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	9a a3       	std	Y+34, r25	; 0x22
    12e2:	89 a3       	std	Y+33, r24	; 0x21
    12e4:	3f c0       	rjmp	.+126    	; 0x1364 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    12e6:	6b a1       	ldd	r22, Y+35	; 0x23
    12e8:	7c a1       	ldd	r23, Y+36	; 0x24
    12ea:	8d a1       	ldd	r24, Y+37	; 0x25
    12ec:	9e a1       	ldd	r25, Y+38	; 0x26
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	3f ef       	ldi	r19, 0xFF	; 255
    12f2:	4f e7       	ldi	r20, 0x7F	; 127
    12f4:	57 e4       	ldi	r21, 0x47	; 71
    12f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12fa:	18 16       	cp	r1, r24
    12fc:	4c f5       	brge	.+82     	; 0x1350 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12fe:	6f a1       	ldd	r22, Y+39	; 0x27
    1300:	78 a5       	ldd	r23, Y+40	; 0x28
    1302:	89 a5       	ldd	r24, Y+41	; 0x29
    1304:	9a a5       	ldd	r25, Y+42	; 0x2a
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e2       	ldi	r20, 0x20	; 32
    130c:	51 e4       	ldi	r21, 0x41	; 65
    130e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	bc 01       	movw	r22, r24
    1318:	cd 01       	movw	r24, r26
    131a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	9a a3       	std	Y+34, r25	; 0x22
    1324:	89 a3       	std	Y+33, r24	; 0x21
    1326:	0f c0       	rjmp	.+30     	; 0x1346 <LCD_displayCharacter+0x1d6>
    1328:	89 e1       	ldi	r24, 0x19	; 25
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	98 a3       	std	Y+32, r25	; 0x20
    132e:	8f 8f       	std	Y+31, r24	; 0x1f
    1330:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1332:	98 a1       	ldd	r25, Y+32	; 0x20
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	f1 f7       	brne	.-4      	; 0x1334 <LCD_displayCharacter+0x1c4>
    1338:	98 a3       	std	Y+32, r25	; 0x20
    133a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    133c:	89 a1       	ldd	r24, Y+33	; 0x21
    133e:	9a a1       	ldd	r25, Y+34	; 0x22
    1340:	01 97       	sbiw	r24, 0x01	; 1
    1342:	9a a3       	std	Y+34, r25	; 0x22
    1344:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1346:	89 a1       	ldd	r24, Y+33	; 0x21
    1348:	9a a1       	ldd	r25, Y+34	; 0x22
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	69 f7       	brne	.-38     	; 0x1328 <LCD_displayCharacter+0x1b8>
    134e:	14 c0       	rjmp	.+40     	; 0x1378 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1350:	6b a1       	ldd	r22, Y+35	; 0x23
    1352:	7c a1       	ldd	r23, Y+36	; 0x24
    1354:	8d a1       	ldd	r24, Y+37	; 0x25
    1356:	9e a1       	ldd	r25, Y+38	; 0x26
    1358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	9a a3       	std	Y+34, r25	; 0x22
    1362:	89 a3       	std	Y+33, r24	; 0x21
    1364:	89 a1       	ldd	r24, Y+33	; 0x21
    1366:	9a a1       	ldd	r25, Y+34	; 0x22
    1368:	9e 8f       	std	Y+30, r25	; 0x1e
    136a:	8d 8f       	std	Y+29, r24	; 0x1d
    136c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    136e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	f1 f7       	brne	.-4      	; 0x1370 <LCD_displayCharacter+0x200>
    1374:	9e 8f       	std	Y+30, r25	; 0x1e
    1376:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
    1378:	e5 e3       	ldi	r30, 0x35	; 53
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	89 ad       	ldd	r24, Y+57	; 0x39
    137e:	80 83       	st	Z, r24
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	a0 e8       	ldi	r26, 0x80	; 128
    1386:	bf e3       	ldi	r27, 0x3F	; 63
    1388:	89 8f       	std	Y+25, r24	; 0x19
    138a:	9a 8f       	std	Y+26, r25	; 0x1a
    138c:	ab 8f       	std	Y+27, r26	; 0x1b
    138e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1390:	69 8d       	ldd	r22, Y+25	; 0x19
    1392:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1394:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1396:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	4a e7       	ldi	r20, 0x7A	; 122
    139e:	53 e4       	ldi	r21, 0x43	; 67
    13a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	8d 8b       	std	Y+21, r24	; 0x15
    13aa:	9e 8b       	std	Y+22, r25	; 0x16
    13ac:	af 8b       	std	Y+23, r26	; 0x17
    13ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13b0:	6d 89       	ldd	r22, Y+21	; 0x15
    13b2:	7e 89       	ldd	r23, Y+22	; 0x16
    13b4:	8f 89       	ldd	r24, Y+23	; 0x17
    13b6:	98 8d       	ldd	r25, Y+24	; 0x18
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	40 e8       	ldi	r20, 0x80	; 128
    13be:	5f e3       	ldi	r21, 0x3F	; 63
    13c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13c4:	88 23       	and	r24, r24
    13c6:	2c f4       	brge	.+10     	; 0x13d2 <LCD_displayCharacter+0x262>
		__ticks = 1;
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	9c 8b       	std	Y+20, r25	; 0x14
    13ce:	8b 8b       	std	Y+19, r24	; 0x13
    13d0:	3f c0       	rjmp	.+126    	; 0x1450 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    13d2:	6d 89       	ldd	r22, Y+21	; 0x15
    13d4:	7e 89       	ldd	r23, Y+22	; 0x16
    13d6:	8f 89       	ldd	r24, Y+23	; 0x17
    13d8:	98 8d       	ldd	r25, Y+24	; 0x18
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	3f ef       	ldi	r19, 0xFF	; 255
    13de:	4f e7       	ldi	r20, 0x7F	; 127
    13e0:	57 e4       	ldi	r21, 0x47	; 71
    13e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13e6:	18 16       	cp	r1, r24
    13e8:	4c f5       	brge	.+82     	; 0x143c <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ea:	69 8d       	ldd	r22, Y+25	; 0x19
    13ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	40 e2       	ldi	r20, 0x20	; 32
    13f8:	51 e4       	ldi	r21, 0x41	; 65
    13fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	bc 01       	movw	r22, r24
    1404:	cd 01       	movw	r24, r26
    1406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	9c 8b       	std	Y+20, r25	; 0x14
    1410:	8b 8b       	std	Y+19, r24	; 0x13
    1412:	0f c0       	rjmp	.+30     	; 0x1432 <LCD_displayCharacter+0x2c2>
    1414:	89 e1       	ldi	r24, 0x19	; 25
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	9a 8b       	std	Y+18, r25	; 0x12
    141a:	89 8b       	std	Y+17, r24	; 0x11
    141c:	89 89       	ldd	r24, Y+17	; 0x11
    141e:	9a 89       	ldd	r25, Y+18	; 0x12
    1420:	01 97       	sbiw	r24, 0x01	; 1
    1422:	f1 f7       	brne	.-4      	; 0x1420 <LCD_displayCharacter+0x2b0>
    1424:	9a 8b       	std	Y+18, r25	; 0x12
    1426:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1428:	8b 89       	ldd	r24, Y+19	; 0x13
    142a:	9c 89       	ldd	r25, Y+20	; 0x14
    142c:	01 97       	sbiw	r24, 0x01	; 1
    142e:	9c 8b       	std	Y+20, r25	; 0x14
    1430:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1432:	8b 89       	ldd	r24, Y+19	; 0x13
    1434:	9c 89       	ldd	r25, Y+20	; 0x14
    1436:	00 97       	sbiw	r24, 0x00	; 0
    1438:	69 f7       	brne	.-38     	; 0x1414 <LCD_displayCharacter+0x2a4>
    143a:	14 c0       	rjmp	.+40     	; 0x1464 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    143c:	6d 89       	ldd	r22, Y+21	; 0x15
    143e:	7e 89       	ldd	r23, Y+22	; 0x16
    1440:	8f 89       	ldd	r24, Y+23	; 0x17
    1442:	98 8d       	ldd	r25, Y+24	; 0x18
    1444:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	9c 8b       	std	Y+20, r25	; 0x14
    144e:	8b 8b       	std	Y+19, r24	; 0x13
    1450:	8b 89       	ldd	r24, Y+19	; 0x13
    1452:	9c 89       	ldd	r25, Y+20	; 0x14
    1454:	98 8b       	std	Y+16, r25	; 0x10
    1456:	8f 87       	std	Y+15, r24	; 0x0f
    1458:	8f 85       	ldd	r24, Y+15	; 0x0f
    145a:	98 89       	ldd	r25, Y+16	; 0x10
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	f1 f7       	brne	.-4      	; 0x145c <LCD_displayCharacter+0x2ec>
    1460:	98 8b       	std	Y+16, r25	; 0x10
    1462:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1464:	a2 e3       	ldi	r26, 0x32	; 50
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e2 e3       	ldi	r30, 0x32	; 50
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	8b 7f       	andi	r24, 0xFB	; 251
    1470:	8c 93       	st	X, r24
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	a0 e8       	ldi	r26, 0x80	; 128
    1478:	bf e3       	ldi	r27, 0x3F	; 63
    147a:	8b 87       	std	Y+11, r24	; 0x0b
    147c:	9c 87       	std	Y+12, r25	; 0x0c
    147e:	ad 87       	std	Y+13, r26	; 0x0d
    1480:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1482:	6b 85       	ldd	r22, Y+11	; 0x0b
    1484:	7c 85       	ldd	r23, Y+12	; 0x0c
    1486:	8d 85       	ldd	r24, Y+13	; 0x0d
    1488:	9e 85       	ldd	r25, Y+14	; 0x0e
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	4a e7       	ldi	r20, 0x7A	; 122
    1490:	53 e4       	ldi	r21, 0x43	; 67
    1492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	8f 83       	std	Y+7, r24	; 0x07
    149c:	98 87       	std	Y+8, r25	; 0x08
    149e:	a9 87       	std	Y+9, r26	; 0x09
    14a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14a2:	6f 81       	ldd	r22, Y+7	; 0x07
    14a4:	78 85       	ldd	r23, Y+8	; 0x08
    14a6:	89 85       	ldd	r24, Y+9	; 0x09
    14a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	40 e8       	ldi	r20, 0x80	; 128
    14b0:	5f e3       	ldi	r21, 0x3F	; 63
    14b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14b6:	88 23       	and	r24, r24
    14b8:	2c f4       	brge	.+10     	; 0x14c4 <LCD_displayCharacter+0x354>
		__ticks = 1;
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	9e 83       	std	Y+6, r25	; 0x06
    14c0:	8d 83       	std	Y+5, r24	; 0x05
    14c2:	3f c0       	rjmp	.+126    	; 0x1542 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    14c4:	6f 81       	ldd	r22, Y+7	; 0x07
    14c6:	78 85       	ldd	r23, Y+8	; 0x08
    14c8:	89 85       	ldd	r24, Y+9	; 0x09
    14ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	3f ef       	ldi	r19, 0xFF	; 255
    14d0:	4f e7       	ldi	r20, 0x7F	; 127
    14d2:	57 e4       	ldi	r21, 0x47	; 71
    14d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14d8:	18 16       	cp	r1, r24
    14da:	4c f5       	brge	.+82     	; 0x152e <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    14de:	7c 85       	ldd	r23, Y+12	; 0x0c
    14e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 e2       	ldi	r20, 0x20	; 32
    14ea:	51 e4       	ldi	r21, 0x41	; 65
    14ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	bc 01       	movw	r22, r24
    14f6:	cd 01       	movw	r24, r26
    14f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	9e 83       	std	Y+6, r25	; 0x06
    1502:	8d 83       	std	Y+5, r24	; 0x05
    1504:	0f c0       	rjmp	.+30     	; 0x1524 <LCD_displayCharacter+0x3b4>
    1506:	89 e1       	ldi	r24, 0x19	; 25
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	9c 83       	std	Y+4, r25	; 0x04
    150c:	8b 83       	std	Y+3, r24	; 0x03
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	9c 81       	ldd	r25, Y+4	; 0x04
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	f1 f7       	brne	.-4      	; 0x1512 <LCD_displayCharacter+0x3a2>
    1516:	9c 83       	std	Y+4, r25	; 0x04
    1518:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    151a:	8d 81       	ldd	r24, Y+5	; 0x05
    151c:	9e 81       	ldd	r25, Y+6	; 0x06
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	9e 83       	std	Y+6, r25	; 0x06
    1522:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1524:	8d 81       	ldd	r24, Y+5	; 0x05
    1526:	9e 81       	ldd	r25, Y+6	; 0x06
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	69 f7       	brne	.-38     	; 0x1506 <LCD_displayCharacter+0x396>
    152c:	14 c0       	rjmp	.+40     	; 0x1556 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    152e:	6f 81       	ldd	r22, Y+7	; 0x07
    1530:	78 85       	ldd	r23, Y+8	; 0x08
    1532:	89 85       	ldd	r24, Y+9	; 0x09
    1534:	9a 85       	ldd	r25, Y+10	; 0x0a
    1536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	9e 83       	std	Y+6, r25	; 0x06
    1540:	8d 83       	std	Y+5, r24	; 0x05
    1542:	8d 81       	ldd	r24, Y+5	; 0x05
    1544:	9e 81       	ldd	r25, Y+6	; 0x06
    1546:	9a 83       	std	Y+2, r25	; 0x02
    1548:	89 83       	std	Y+1, r24	; 0x01
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	9a 81       	ldd	r25, Y+2	; 0x02
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	f1 f7       	brne	.-4      	; 0x154e <LCD_displayCharacter+0x3de>
    1552:	9a 83       	std	Y+2, r25	; 0x02
    1554:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1556:	e9 96       	adiw	r28, 0x39	; 57
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	f8 94       	cli
    155c:	de bf       	out	0x3e, r29	; 62
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	cd bf       	out	0x3d, r28	; 61
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	00 d0       	rcall	.+0      	; 0x156e <LCD_displayString+0x6>
    156e:	0f 92       	push	r0
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	9b 83       	std	Y+3, r25	; 0x03
    1576:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1578:	19 82       	std	Y+1, r1	; 0x01
    157a:	0e c0       	rjmp	.+28     	; 0x1598 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	9b 81       	ldd	r25, Y+3	; 0x03
    1586:	fc 01       	movw	r30, r24
    1588:	e2 0f       	add	r30, r18
    158a:	f3 1f       	adc	r31, r19
    158c:	80 81       	ld	r24, Z
    158e:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCD_displayCharacter>
		i++;
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	8f 5f       	subi	r24, 0xFF	; 255
    1596:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	9b 81       	ldd	r25, Y+3	; 0x03
    15a2:	fc 01       	movw	r30, r24
    15a4:	e2 0f       	add	r30, r18
    15a6:	f3 1f       	adc	r31, r19
    15a8:	80 81       	ld	r24, Z
    15aa:	88 23       	and	r24, r24
    15ac:	39 f7       	brne	.-50     	; 0x157c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <LCD_goToRowColumn+0x6>
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <LCD_goToRowColumn+0x8>
    15c2:	0f 92       	push	r0
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	8a 83       	std	Y+2, r24	; 0x02
    15ca:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	3d 83       	std	Y+5, r19	; 0x05
    15d4:	2c 83       	std	Y+4, r18	; 0x04
    15d6:	8c 81       	ldd	r24, Y+4	; 0x04
    15d8:	9d 81       	ldd	r25, Y+5	; 0x05
    15da:	81 30       	cpi	r24, 0x01	; 1
    15dc:	91 05       	cpc	r25, r1
    15de:	c1 f0       	breq	.+48     	; 0x1610 <LCD_goToRowColumn+0x56>
    15e0:	2c 81       	ldd	r18, Y+4	; 0x04
    15e2:	3d 81       	ldd	r19, Y+5	; 0x05
    15e4:	22 30       	cpi	r18, 0x02	; 2
    15e6:	31 05       	cpc	r19, r1
    15e8:	2c f4       	brge	.+10     	; 0x15f4 <LCD_goToRowColumn+0x3a>
    15ea:	8c 81       	ldd	r24, Y+4	; 0x04
    15ec:	9d 81       	ldd	r25, Y+5	; 0x05
    15ee:	00 97       	sbiw	r24, 0x00	; 0
    15f0:	61 f0       	breq	.+24     	; 0x160a <LCD_goToRowColumn+0x50>
    15f2:	19 c0       	rjmp	.+50     	; 0x1626 <LCD_goToRowColumn+0x6c>
    15f4:	2c 81       	ldd	r18, Y+4	; 0x04
    15f6:	3d 81       	ldd	r19, Y+5	; 0x05
    15f8:	22 30       	cpi	r18, 0x02	; 2
    15fa:	31 05       	cpc	r19, r1
    15fc:	69 f0       	breq	.+26     	; 0x1618 <LCD_goToRowColumn+0x5e>
    15fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1600:	9d 81       	ldd	r25, Y+5	; 0x05
    1602:	83 30       	cpi	r24, 0x03	; 3
    1604:	91 05       	cpc	r25, r1
    1606:	61 f0       	breq	.+24     	; 0x1620 <LCD_goToRowColumn+0x66>
    1608:	0e c0       	rjmp	.+28     	; 0x1626 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	0b c0       	rjmp	.+22     	; 0x1626 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	80 5c       	subi	r24, 0xC0	; 192
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	07 c0       	rjmp	.+14     	; 0x1626 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	80 5f       	subi	r24, 0xF0	; 240
    161c:	89 83       	std	Y+1, r24	; 0x01
    161e:	03 c0       	rjmp	.+6      	; 0x1626 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	80 5b       	subi	r24, 0xB0	; 176
    1624:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	80 68       	ori	r24, 0x80	; 128
    162a:	0e 94 bc 06 	call	0xd78	; 0xd78 <LCD_sendCommand>
}
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	00 d0       	rcall	.+0      	; 0x1644 <LCD_displayStringRowColumn+0x6>
    1644:	00 d0       	rcall	.+0      	; 0x1646 <LCD_displayStringRowColumn+0x8>
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	89 83       	std	Y+1, r24	; 0x01
    164c:	6a 83       	std	Y+2, r22	; 0x02
    164e:	5c 83       	std	Y+4, r21	; 0x04
    1650:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	6a 81       	ldd	r22, Y+2	; 0x02
    1656:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	9c 81       	ldd	r25, Y+4	; 0x04
    165e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
}
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
    1678:	62 97       	sbiw	r28, 0x12	; 18
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	9a 8b       	std	Y+18, r25	; 0x12
    1686:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    1688:	89 89       	ldd	r24, Y+17	; 0x11
    168a:	9a 89       	ldd	r25, Y+18	; 0x12
    168c:	9e 01       	movw	r18, r28
    168e:	2f 5f       	subi	r18, 0xFF	; 255
    1690:	3f 4f       	sbci	r19, 0xFF	; 255
    1692:	b9 01       	movw	r22, r18
    1694:	4a e0       	ldi	r20, 0x0A	; 10
    1696:	50 e0       	ldi	r21, 0x00	; 0
    1698:	0e 94 44 11 	call	0x2288	; 0x2288 <itoa>
   LCD_displayString(buff);
    169c:	ce 01       	movw	r24, r28
    169e:	01 96       	adiw	r24, 0x01	; 1
    16a0:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
}
    16a4:	62 96       	adiw	r28, 0x12	; 18
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	f8 94       	cli
    16aa:	de bf       	out	0x3e, r29	; 62
    16ac:	0f be       	out	0x3f, r0	; 63
    16ae:	cd bf       	out	0x3d, r28	; 61
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	08 95       	ret

000016b6 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	0e 94 bc 06 	call	0xd78	; 0xd78 <LCD_sendCommand>
}
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <main>:
uint8 check_input_correct(uint8 * const input);



int main(void)
{
    16ca:	0f 93       	push	r16
    16cc:	1f 93       	push	r17
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    16d6:	e1 97       	sbiw	r28, 0x31	; 49
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	cd bf       	out	0x3d, r28	; 61

	LCD_init();
    16e2:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCD_init>
	uint8 input[INPUT_MAX_LENGTH]={};
    16e6:	81 e1       	ldi	r24, 0x11	; 17
    16e8:	fe 01       	movw	r30, r28
    16ea:	7f 96       	adiw	r30, 0x1f	; 31
    16ec:	df 01       	movw	r26, r30
    16ee:	48 2f       	mov	r20, r24
    16f0:	1d 92       	st	X+, r1
    16f2:	4a 95       	dec	r20
    16f4:	e9 f7       	brne	.-6      	; 0x16f0 <main+0x26>


    uint8 i=0;
    16f6:	1e 8e       	std	Y+30, r1	; 0x1e
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	aa e7       	ldi	r26, 0x7A	; 122
    16fe:	b3 e4       	ldi	r27, 0x43	; 67
    1700:	8b 87       	std	Y+11, r24	; 0x0b
    1702:	9c 87       	std	Y+12, r25	; 0x0c
    1704:	ad 87       	std	Y+13, r26	; 0x0d
    1706:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1708:	6b 85       	ldd	r22, Y+11	; 0x0b
    170a:	7c 85       	ldd	r23, Y+12	; 0x0c
    170c:	8d 85       	ldd	r24, Y+13	; 0x0d
    170e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	4a e7       	ldi	r20, 0x7A	; 122
    1716:	53 e4       	ldi	r21, 0x43	; 67
    1718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	8f 83       	std	Y+7, r24	; 0x07
    1722:	98 87       	std	Y+8, r25	; 0x08
    1724:	a9 87       	std	Y+9, r26	; 0x09
    1726:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1728:	6f 81       	ldd	r22, Y+7	; 0x07
    172a:	78 85       	ldd	r23, Y+8	; 0x08
    172c:	89 85       	ldd	r24, Y+9	; 0x09
    172e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	40 e8       	ldi	r20, 0x80	; 128
    1736:	5f e3       	ldi	r21, 0x3F	; 63
    1738:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    173c:	88 23       	and	r24, r24
    173e:	2c f4       	brge	.+10     	; 0x174a <main+0x80>
		__ticks = 1;
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	9e 83       	std	Y+6, r25	; 0x06
    1746:	8d 83       	std	Y+5, r24	; 0x05
    1748:	3f c0       	rjmp	.+126    	; 0x17c8 <main+0xfe>
	else if (__tmp > 65535)
    174a:	6f 81       	ldd	r22, Y+7	; 0x07
    174c:	78 85       	ldd	r23, Y+8	; 0x08
    174e:	89 85       	ldd	r24, Y+9	; 0x09
    1750:	9a 85       	ldd	r25, Y+10	; 0x0a
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	3f ef       	ldi	r19, 0xFF	; 255
    1756:	4f e7       	ldi	r20, 0x7F	; 127
    1758:	57 e4       	ldi	r21, 0x47	; 71
    175a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    175e:	18 16       	cp	r1, r24
    1760:	4c f5       	brge	.+82     	; 0x17b4 <main+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1762:	6b 85       	ldd	r22, Y+11	; 0x0b
    1764:	7c 85       	ldd	r23, Y+12	; 0x0c
    1766:	8d 85       	ldd	r24, Y+13	; 0x0d
    1768:	9e 85       	ldd	r25, Y+14	; 0x0e
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	40 e2       	ldi	r20, 0x20	; 32
    1770:	51 e4       	ldi	r21, 0x41	; 65
    1772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	bc 01       	movw	r22, r24
    177c:	cd 01       	movw	r24, r26
    177e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	9e 83       	std	Y+6, r25	; 0x06
    1788:	8d 83       	std	Y+5, r24	; 0x05
    178a:	0f c0       	rjmp	.+30     	; 0x17aa <main+0xe0>
    178c:	89 e1       	ldi	r24, 0x19	; 25
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	9c 83       	std	Y+4, r25	; 0x04
    1792:	8b 83       	std	Y+3, r24	; 0x03
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	9c 81       	ldd	r25, Y+4	; 0x04
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	f1 f7       	brne	.-4      	; 0x1798 <main+0xce>
    179c:	9c 83       	std	Y+4, r25	; 0x04
    179e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a0:	8d 81       	ldd	r24, Y+5	; 0x05
    17a2:	9e 81       	ldd	r25, Y+6	; 0x06
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	9e 83       	std	Y+6, r25	; 0x06
    17a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17aa:	8d 81       	ldd	r24, Y+5	; 0x05
    17ac:	9e 81       	ldd	r25, Y+6	; 0x06
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	69 f7       	brne	.-38     	; 0x178c <main+0xc2>
    17b2:	14 c0       	rjmp	.+40     	; 0x17dc <main+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b4:	6f 81       	ldd	r22, Y+7	; 0x07
    17b6:	78 85       	ldd	r23, Y+8	; 0x08
    17b8:	89 85       	ldd	r24, Y+9	; 0x09
    17ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    17bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	9e 83       	std	Y+6, r25	; 0x06
    17c6:	8d 83       	std	Y+5, r24	; 0x05
    17c8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ca:	9e 81       	ldd	r25, Y+6	; 0x06
    17cc:	9a 83       	std	Y+2, r25	; 0x02
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	9a 81       	ldd	r25, Y+2	; 0x02
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <main+0x10a>
    17d8:	9a 83       	std	Y+2, r25	; 0x02
    17da:	89 83       	std	Y+1, r24	; 0x01
	{


		do{
			_delay_ms(250);
			 input[i]= KeyPad_getPressedKey();
    17dc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17de:	08 2f       	mov	r16, r24
    17e0:	10 e0       	ldi	r17, 0x00	; 0
    17e2:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    17e6:	28 2f       	mov	r18, r24
    17e8:	ce 01       	movw	r24, r28
    17ea:	4f 96       	adiw	r24, 0x1f	; 31
    17ec:	fc 01       	movw	r30, r24
    17ee:	e0 0f       	add	r30, r16
    17f0:	f1 1f       	adc	r31, r17
    17f2:	20 83       	st	Z, r18
			 if(input[i]==0||input[i]==1||input[i]==2||input[i]==3||input[i]==4||input[i]==5||input[i]==6||input[i]==7||input[i]==8||input[i]==9)
    17f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	ce 01       	movw	r24, r28
    17fc:	4f 96       	adiw	r24, 0x1f	; 31
    17fe:	fc 01       	movw	r30, r24
    1800:	e2 0f       	add	r30, r18
    1802:	f3 1f       	adc	r31, r19
    1804:	80 81       	ld	r24, Z
    1806:	88 23       	and	r24, r24
    1808:	09 f4       	brne	.+2      	; 0x180c <main+0x142>
    180a:	66 c0       	rjmp	.+204    	; 0x18d8 <main+0x20e>
    180c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    180e:	28 2f       	mov	r18, r24
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	ce 01       	movw	r24, r28
    1814:	4f 96       	adiw	r24, 0x1f	; 31
    1816:	fc 01       	movw	r30, r24
    1818:	e2 0f       	add	r30, r18
    181a:	f3 1f       	adc	r31, r19
    181c:	80 81       	ld	r24, Z
    181e:	81 30       	cpi	r24, 0x01	; 1
    1820:	09 f4       	brne	.+2      	; 0x1824 <main+0x15a>
    1822:	5a c0       	rjmp	.+180    	; 0x18d8 <main+0x20e>
    1824:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	ce 01       	movw	r24, r28
    182c:	4f 96       	adiw	r24, 0x1f	; 31
    182e:	fc 01       	movw	r30, r24
    1830:	e2 0f       	add	r30, r18
    1832:	f3 1f       	adc	r31, r19
    1834:	80 81       	ld	r24, Z
    1836:	82 30       	cpi	r24, 0x02	; 2
    1838:	09 f4       	brne	.+2      	; 0x183c <main+0x172>
    183a:	4e c0       	rjmp	.+156    	; 0x18d8 <main+0x20e>
    183c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	ce 01       	movw	r24, r28
    1844:	4f 96       	adiw	r24, 0x1f	; 31
    1846:	fc 01       	movw	r30, r24
    1848:	e2 0f       	add	r30, r18
    184a:	f3 1f       	adc	r31, r19
    184c:	80 81       	ld	r24, Z
    184e:	83 30       	cpi	r24, 0x03	; 3
    1850:	09 f4       	brne	.+2      	; 0x1854 <main+0x18a>
    1852:	42 c0       	rjmp	.+132    	; 0x18d8 <main+0x20e>
    1854:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	ce 01       	movw	r24, r28
    185c:	4f 96       	adiw	r24, 0x1f	; 31
    185e:	fc 01       	movw	r30, r24
    1860:	e2 0f       	add	r30, r18
    1862:	f3 1f       	adc	r31, r19
    1864:	80 81       	ld	r24, Z
    1866:	84 30       	cpi	r24, 0x04	; 4
    1868:	b9 f1       	breq	.+110    	; 0x18d8 <main+0x20e>
    186a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	ce 01       	movw	r24, r28
    1872:	4f 96       	adiw	r24, 0x1f	; 31
    1874:	fc 01       	movw	r30, r24
    1876:	e2 0f       	add	r30, r18
    1878:	f3 1f       	adc	r31, r19
    187a:	80 81       	ld	r24, Z
    187c:	85 30       	cpi	r24, 0x05	; 5
    187e:	61 f1       	breq	.+88     	; 0x18d8 <main+0x20e>
    1880:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	ce 01       	movw	r24, r28
    1888:	4f 96       	adiw	r24, 0x1f	; 31
    188a:	fc 01       	movw	r30, r24
    188c:	e2 0f       	add	r30, r18
    188e:	f3 1f       	adc	r31, r19
    1890:	80 81       	ld	r24, Z
    1892:	86 30       	cpi	r24, 0x06	; 6
    1894:	09 f1       	breq	.+66     	; 0x18d8 <main+0x20e>
    1896:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	ce 01       	movw	r24, r28
    189e:	4f 96       	adiw	r24, 0x1f	; 31
    18a0:	fc 01       	movw	r30, r24
    18a2:	e2 0f       	add	r30, r18
    18a4:	f3 1f       	adc	r31, r19
    18a6:	80 81       	ld	r24, Z
    18a8:	87 30       	cpi	r24, 0x07	; 7
    18aa:	b1 f0       	breq	.+44     	; 0x18d8 <main+0x20e>
    18ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	ce 01       	movw	r24, r28
    18b4:	4f 96       	adiw	r24, 0x1f	; 31
    18b6:	fc 01       	movw	r30, r24
    18b8:	e2 0f       	add	r30, r18
    18ba:	f3 1f       	adc	r31, r19
    18bc:	80 81       	ld	r24, Z
    18be:	88 30       	cpi	r24, 0x08	; 8
    18c0:	59 f0       	breq	.+22     	; 0x18d8 <main+0x20e>
    18c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	ce 01       	movw	r24, r28
    18ca:	4f 96       	adiw	r24, 0x1f	; 31
    18cc:	fc 01       	movw	r30, r24
    18ce:	e2 0f       	add	r30, r18
    18d0:	f3 1f       	adc	r31, r19
    18d2:	80 81       	ld	r24, Z
    18d4:	89 30       	cpi	r24, 0x09	; 9
    18d6:	69 f4       	brne	.+26     	; 0x18f2 <main+0x228>
			 {
				 LCD_displayCharacter(input[i]+48);
    18d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	ce 01       	movw	r24, r28
    18e0:	4f 96       	adiw	r24, 0x1f	; 31
    18e2:	fc 01       	movw	r30, r24
    18e4:	e2 0f       	add	r30, r18
    18e6:	f3 1f       	adc	r31, r19
    18e8:	80 81       	ld	r24, Z
    18ea:	80 5d       	subi	r24, 0xD0	; 208
    18ec:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCD_displayCharacter>
    18f0:	0b c0       	rjmp	.+22     	; 0x1908 <main+0x23e>

			 }
			 else
			 {
				 LCD_displayCharacter(input[i]);
    18f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	ce 01       	movw	r24, r28
    18fa:	4f 96       	adiw	r24, 0x1f	; 31
    18fc:	fc 01       	movw	r30, r24
    18fe:	e2 0f       	add	r30, r18
    1900:	f3 1f       	adc	r31, r19
    1902:	80 81       	ld	r24, Z
    1904:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCD_displayCharacter>
			 }
			 ++i;
    1908:	8e 8d       	ldd	r24, Y+30	; 0x1e
    190a:	8f 5f       	subi	r24, 0xFF	; 255
    190c:	8e 8f       	std	Y+30, r24	; 0x1e
		}while( (input[i-1] != '=') && (i<= INPUT_MAX_LENGTH) );
    190e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1910:	88 2f       	mov	r24, r24
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	9c 01       	movw	r18, r24
    1916:	21 50       	subi	r18, 0x01	; 1
    1918:	30 40       	sbci	r19, 0x00	; 0
    191a:	ce 01       	movw	r24, r28
    191c:	4f 96       	adiw	r24, 0x1f	; 31
    191e:	fc 01       	movw	r30, r24
    1920:	e2 0f       	add	r30, r18
    1922:	f3 1f       	adc	r31, r19
    1924:	80 81       	ld	r24, Z
    1926:	8d 33       	cpi	r24, 0x3D	; 61
    1928:	21 f0       	breq	.+8      	; 0x1932 <main+0x268>
    192a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    192c:	82 31       	cpi	r24, 0x12	; 18
    192e:	08 f4       	brcc	.+2      	; 0x1932 <main+0x268>
    1930:	e3 ce       	rjmp	.-570    	; 0x16f8 <main+0x2e>


		int j=0;
    1932:	1d 8e       	std	Y+29, r1	; 0x1d
    1934:	1c 8e       	std	Y+28, r1	; 0x1c
    1936:	21 c0       	rjmp	.+66     	; 0x197a <main+0x2b0>
		while(input[j]!='=')
		{
			if(input[j]>=0 && input[j]<=9)
    1938:	2c 8d       	ldd	r18, Y+28	; 0x1c
    193a:	3d 8d       	ldd	r19, Y+29	; 0x1d
    193c:	ce 01       	movw	r24, r28
    193e:	4f 96       	adiw	r24, 0x1f	; 31
    1940:	fc 01       	movw	r30, r24
    1942:	e2 0f       	add	r30, r18
    1944:	f3 1f       	adc	r31, r19
    1946:	80 81       	ld	r24, Z
    1948:	8a 30       	cpi	r24, 0x0A	; 10
    194a:	90 f4       	brcc	.+36     	; 0x1970 <main+0x2a6>
			input[j]+=48;
    194c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    194e:	5d 8d       	ldd	r21, Y+29	; 0x1d
    1950:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1952:	3d 8d       	ldd	r19, Y+29	; 0x1d
    1954:	ce 01       	movw	r24, r28
    1956:	4f 96       	adiw	r24, 0x1f	; 31
    1958:	fc 01       	movw	r30, r24
    195a:	e2 0f       	add	r30, r18
    195c:	f3 1f       	adc	r31, r19
    195e:	80 81       	ld	r24, Z
    1960:	28 2f       	mov	r18, r24
    1962:	20 5d       	subi	r18, 0xD0	; 208
    1964:	ce 01       	movw	r24, r28
    1966:	4f 96       	adiw	r24, 0x1f	; 31
    1968:	fc 01       	movw	r30, r24
    196a:	e4 0f       	add	r30, r20
    196c:	f5 1f       	adc	r31, r21
    196e:	20 83       	st	Z, r18

			++j;
    1970:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1972:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1974:	01 96       	adiw	r24, 0x01	; 1
    1976:	9d 8f       	std	Y+29, r25	; 0x1d
    1978:	8c 8f       	std	Y+28, r24	; 0x1c
			 ++i;
		}while( (input[i-1] != '=') && (i<= INPUT_MAX_LENGTH) );


		int j=0;
		while(input[j]!='=')
    197a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    197c:	3d 8d       	ldd	r19, Y+29	; 0x1d
    197e:	ce 01       	movw	r24, r28
    1980:	4f 96       	adiw	r24, 0x1f	; 31
    1982:	fc 01       	movw	r30, r24
    1984:	e2 0f       	add	r30, r18
    1986:	f3 1f       	adc	r31, r19
    1988:	80 81       	ld	r24, Z
    198a:	8d 33       	cpi	r24, 0x3D	; 61
    198c:	a9 f6       	brne	.-86     	; 0x1938 <main+0x26e>
			++j;
		}



		if(check_input_correct(input))
    198e:	ce 01       	movw	r24, r28
    1990:	4f 96       	adiw	r24, 0x1f	; 31
    1992:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <check_input_correct>
    1996:	88 23       	and	r24, r24
    1998:	09 f4       	brne	.+2      	; 0x199c <main+0x2d2>
    199a:	9f c1       	rjmp	.+830    	; 0x1cda <main+0x610>
		{

           uint8 s=0;
    199c:	1b 8e       	std	Y+27, r1	; 0x1b
           uint8 operations_count=0;
    199e:	1a 8e       	std	Y+26, r1	; 0x1a
           uint8 numbers_count=0;
    19a0:	19 8e       	std	Y+25, r1	; 0x19
    19a2:	32 c0       	rjmp	.+100    	; 0x1a08 <main+0x33e>
           while(input[s]!='\0')
           {

        	   if(input[s]=='+'||input[s]=='-'||input[s]=='*'||input[s]=='/')
    19a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19a6:	28 2f       	mov	r18, r24
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	ce 01       	movw	r24, r28
    19ac:	4f 96       	adiw	r24, 0x1f	; 31
    19ae:	fc 01       	movw	r30, r24
    19b0:	e2 0f       	add	r30, r18
    19b2:	f3 1f       	adc	r31, r19
    19b4:	80 81       	ld	r24, Z
    19b6:	8b 32       	cpi	r24, 0x2B	; 43
    19b8:	09 f1       	breq	.+66     	; 0x19fc <main+0x332>
    19ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19bc:	28 2f       	mov	r18, r24
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	ce 01       	movw	r24, r28
    19c2:	4f 96       	adiw	r24, 0x1f	; 31
    19c4:	fc 01       	movw	r30, r24
    19c6:	e2 0f       	add	r30, r18
    19c8:	f3 1f       	adc	r31, r19
    19ca:	80 81       	ld	r24, Z
    19cc:	8d 32       	cpi	r24, 0x2D	; 45
    19ce:	b1 f0       	breq	.+44     	; 0x19fc <main+0x332>
    19d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19d2:	28 2f       	mov	r18, r24
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	ce 01       	movw	r24, r28
    19d8:	4f 96       	adiw	r24, 0x1f	; 31
    19da:	fc 01       	movw	r30, r24
    19dc:	e2 0f       	add	r30, r18
    19de:	f3 1f       	adc	r31, r19
    19e0:	80 81       	ld	r24, Z
    19e2:	8a 32       	cpi	r24, 0x2A	; 42
    19e4:	59 f0       	breq	.+22     	; 0x19fc <main+0x332>
    19e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	ce 01       	movw	r24, r28
    19ee:	4f 96       	adiw	r24, 0x1f	; 31
    19f0:	fc 01       	movw	r30, r24
    19f2:	e2 0f       	add	r30, r18
    19f4:	f3 1f       	adc	r31, r19
    19f6:	80 81       	ld	r24, Z
    19f8:	8f 32       	cpi	r24, 0x2F	; 47
    19fa:	19 f4       	brne	.+6      	; 0x1a02 <main+0x338>
        	   {
        		   ++operations_count;
    19fc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19fe:	8f 5f       	subi	r24, 0xFF	; 255
    1a00:	8a 8f       	std	Y+26, r24	; 0x1a
        	   }

        	   ++s;
    1a02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a04:	8f 5f       	subi	r24, 0xFF	; 255
    1a06:	8b 8f       	std	Y+27, r24	; 0x1b
		{

           uint8 s=0;
           uint8 operations_count=0;
           uint8 numbers_count=0;
           while(input[s]!='\0')
    1a08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	ce 01       	movw	r24, r28
    1a10:	4f 96       	adiw	r24, 0x1f	; 31
    1a12:	fc 01       	movw	r30, r24
    1a14:	e2 0f       	add	r30, r18
    1a16:	f3 1f       	adc	r31, r19
    1a18:	80 81       	ld	r24, Z
    1a1a:	88 23       	and	r24, r24
    1a1c:	19 f6       	brne	.-122    	; 0x19a4 <main+0x2da>
        		   ++operations_count;
        	   }

        	   ++s;
           }
           numbers_count=operations_count+1;
    1a1e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a20:	8f 5f       	subi	r24, 0xFF	; 255
    1a22:	89 8f       	std	Y+25, r24	; 0x19

           sint16 *operations_array =(sint16*)malloc(operations_count*sizeof(sint16));
    1a24:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a26:	88 2f       	mov	r24, r24
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	0e 94 3f 10 	call	0x207e	; 0x207e <malloc>
    1a32:	98 8f       	std	Y+24, r25	; 0x18
    1a34:	8f 8b       	std	Y+23, r24	; 0x17
           sint16 *numbers_array =(sint16*)malloc(numbers_count*sizeof(sint16));
    1a36:	89 8d       	ldd	r24, Y+25	; 0x19
    1a38:	88 2f       	mov	r24, r24
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	0e 94 3f 10 	call	0x207e	; 0x207e <malloc>
    1a44:	9e 8b       	std	Y+22, r25	; 0x16
    1a46:	8d 8b       	std	Y+21, r24	; 0x15

           s=0;
    1a48:	1b 8e       	std	Y+27, r1	; 0x1b
           uint8 h=0;
    1a4a:	1c 8a       	std	Y+20, r1	; 0x14
           uint8 m=0;
    1a4c:	1b 8a       	std	Y+19, r1	; 0x13
    1a4e:	9c c0       	rjmp	.+312    	; 0x1b88 <main+0x4be>
           while(input[s]!='\0')
           {

        	   while(input[s]>='0' && input[s]<='9')
        	   {
        		   numbers_array[h]=(numbers_array[h]*10) +(input[s]-48);
    1a50:	8c 89       	ldd	r24, Y+20	; 0x14
    1a52:	88 2f       	mov	r24, r24
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	9c 01       	movw	r18, r24
    1a58:	22 0f       	add	r18, r18
    1a5a:	33 1f       	adc	r19, r19
    1a5c:	8d 89       	ldd	r24, Y+21	; 0x15
    1a5e:	9e 89       	ldd	r25, Y+22	; 0x16
    1a60:	dc 01       	movw	r26, r24
    1a62:	a2 0f       	add	r26, r18
    1a64:	b3 1f       	adc	r27, r19
    1a66:	8c 89       	ldd	r24, Y+20	; 0x14
    1a68:	88 2f       	mov	r24, r24
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	9c 01       	movw	r18, r24
    1a6e:	22 0f       	add	r18, r18
    1a70:	33 1f       	adc	r19, r19
    1a72:	8d 89       	ldd	r24, Y+21	; 0x15
    1a74:	9e 89       	ldd	r25, Y+22	; 0x16
    1a76:	fc 01       	movw	r30, r24
    1a78:	e2 0f       	add	r30, r18
    1a7a:	f3 1f       	adc	r31, r19
    1a7c:	80 81       	ld	r24, Z
    1a7e:	91 81       	ldd	r25, Z+1	; 0x01
    1a80:	9c 01       	movw	r18, r24
    1a82:	22 0f       	add	r18, r18
    1a84:	33 1f       	adc	r19, r19
    1a86:	c9 01       	movw	r24, r18
    1a88:	88 0f       	add	r24, r24
    1a8a:	99 1f       	adc	r25, r25
    1a8c:	88 0f       	add	r24, r24
    1a8e:	99 1f       	adc	r25, r25
    1a90:	a9 01       	movw	r20, r18
    1a92:	48 0f       	add	r20, r24
    1a94:	59 1f       	adc	r21, r25
    1a96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	4f 96       	adiw	r24, 0x1f	; 31
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	e2 0f       	add	r30, r18
    1aa4:	f3 1f       	adc	r31, r19
    1aa6:	80 81       	ld	r24, Z
    1aa8:	88 2f       	mov	r24, r24
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	c0 97       	sbiw	r24, 0x30	; 48
    1aae:	84 0f       	add	r24, r20
    1ab0:	95 1f       	adc	r25, r21
    1ab2:	11 96       	adiw	r26, 0x01	; 1
    1ab4:	9c 93       	st	X, r25
    1ab6:	8e 93       	st	-X, r24
        		   ++s;
    1ab8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aba:	8f 5f       	subi	r24, 0xFF	; 255
    1abc:	8b 8f       	std	Y+27, r24	; 0x1b
           uint8 h=0;
           uint8 m=0;
           while(input[s]!='\0')
           {

        	   while(input[s]>='0' && input[s]<='9')
    1abe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	ce 01       	movw	r24, r28
    1ac6:	4f 96       	adiw	r24, 0x1f	; 31
    1ac8:	fc 01       	movw	r30, r24
    1aca:	e2 0f       	add	r30, r18
    1acc:	f3 1f       	adc	r31, r19
    1ace:	80 81       	ld	r24, Z
    1ad0:	80 33       	cpi	r24, 0x30	; 48
    1ad2:	60 f0       	brcs	.+24     	; 0x1aec <main+0x422>
    1ad4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ad6:	28 2f       	mov	r18, r24
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	ce 01       	movw	r24, r28
    1adc:	4f 96       	adiw	r24, 0x1f	; 31
    1ade:	fc 01       	movw	r30, r24
    1ae0:	e2 0f       	add	r30, r18
    1ae2:	f3 1f       	adc	r31, r19
    1ae4:	80 81       	ld	r24, Z
    1ae6:	8a 33       	cpi	r24, 0x3A	; 58
    1ae8:	08 f4       	brcc	.+2      	; 0x1aec <main+0x422>
    1aea:	b2 cf       	rjmp	.-156    	; 0x1a50 <main+0x386>
        	   {
        		   numbers_array[h]=(numbers_array[h]*10) +(input[s]-48);
        		   ++s;
        	   }
        	   ++h;
    1aec:	8c 89       	ldd	r24, Y+20	; 0x14
    1aee:	8f 5f       	subi	r24, 0xFF	; 255
    1af0:	8c 8b       	std	Y+20, r24	; 0x14
        	   if(input[s]=='+'||input[s]=='-'||input[s]=='*'||input[s]=='/')
    1af2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1af4:	28 2f       	mov	r18, r24
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	ce 01       	movw	r24, r28
    1afa:	4f 96       	adiw	r24, 0x1f	; 31
    1afc:	fc 01       	movw	r30, r24
    1afe:	e2 0f       	add	r30, r18
    1b00:	f3 1f       	adc	r31, r19
    1b02:	80 81       	ld	r24, Z
    1b04:	8b 32       	cpi	r24, 0x2B	; 43
    1b06:	09 f1       	breq	.+66     	; 0x1b4a <main+0x480>
    1b08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b0a:	28 2f       	mov	r18, r24
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	ce 01       	movw	r24, r28
    1b10:	4f 96       	adiw	r24, 0x1f	; 31
    1b12:	fc 01       	movw	r30, r24
    1b14:	e2 0f       	add	r30, r18
    1b16:	f3 1f       	adc	r31, r19
    1b18:	80 81       	ld	r24, Z
    1b1a:	8d 32       	cpi	r24, 0x2D	; 45
    1b1c:	b1 f0       	breq	.+44     	; 0x1b4a <main+0x480>
    1b1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b20:	28 2f       	mov	r18, r24
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	ce 01       	movw	r24, r28
    1b26:	4f 96       	adiw	r24, 0x1f	; 31
    1b28:	fc 01       	movw	r30, r24
    1b2a:	e2 0f       	add	r30, r18
    1b2c:	f3 1f       	adc	r31, r19
    1b2e:	80 81       	ld	r24, Z
    1b30:	8a 32       	cpi	r24, 0x2A	; 42
    1b32:	59 f0       	breq	.+22     	; 0x1b4a <main+0x480>
    1b34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	ce 01       	movw	r24, r28
    1b3c:	4f 96       	adiw	r24, 0x1f	; 31
    1b3e:	fc 01       	movw	r30, r24
    1b40:	e2 0f       	add	r30, r18
    1b42:	f3 1f       	adc	r31, r19
    1b44:	80 81       	ld	r24, Z
    1b46:	8f 32       	cpi	r24, 0x2F	; 47
    1b48:	e1 f4       	brne	.+56     	; 0x1b82 <main+0x4b8>
        	   {
        		   operations_array[m]=input[s];
    1b4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b4c:	88 2f       	mov	r24, r24
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	9c 01       	movw	r18, r24
    1b52:	22 0f       	add	r18, r18
    1b54:	33 1f       	adc	r19, r19
    1b56:	8f 89       	ldd	r24, Y+23	; 0x17
    1b58:	98 8d       	ldd	r25, Y+24	; 0x18
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	a2 0f       	add	r26, r18
    1b5e:	b3 1f       	adc	r27, r19
    1b60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	ce 01       	movw	r24, r28
    1b68:	4f 96       	adiw	r24, 0x1f	; 31
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	e2 0f       	add	r30, r18
    1b6e:	f3 1f       	adc	r31, r19
    1b70:	80 81       	ld	r24, Z
    1b72:	88 2f       	mov	r24, r24
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	11 96       	adiw	r26, 0x01	; 1
    1b78:	9c 93       	st	X, r25
    1b7a:	8e 93       	st	-X, r24
        		   ++m;
    1b7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b7e:	8f 5f       	subi	r24, 0xFF	; 255
    1b80:	8b 8b       	std	Y+19, r24	; 0x13
        	   }

        	   ++s;
    1b82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b84:	8f 5f       	subi	r24, 0xFF	; 255
    1b86:	8b 8f       	std	Y+27, r24	; 0x1b
           sint16 *numbers_array =(sint16*)malloc(numbers_count*sizeof(sint16));

           s=0;
           uint8 h=0;
           uint8 m=0;
           while(input[s]!='\0')
    1b88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b8a:	28 2f       	mov	r18, r24
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	ce 01       	movw	r24, r28
    1b90:	4f 96       	adiw	r24, 0x1f	; 31
    1b92:	fc 01       	movw	r30, r24
    1b94:	e2 0f       	add	r30, r18
    1b96:	f3 1f       	adc	r31, r19
    1b98:	80 81       	ld	r24, Z
    1b9a:	88 23       	and	r24, r24
    1b9c:	09 f0       	breq	.+2      	; 0x1ba0 <main+0x4d6>
    1b9e:	8f cf       	rjmp	.-226    	; 0x1abe <main+0x3f4>

        	   ++s;
           }


           sint16 result=numbers_array[0];
    1ba0:	ed 89       	ldd	r30, Y+21	; 0x15
    1ba2:	fe 89       	ldd	r31, Y+22	; 0x16
    1ba4:	80 81       	ld	r24, Z
    1ba6:	91 81       	ldd	r25, Z+1	; 0x01
    1ba8:	9a 8b       	std	Y+18, r25	; 0x12
    1baa:	89 8b       	std	Y+17, r24	; 0x11
           for(sint16 i=0;i<operations_count;i++)
    1bac:	18 8a       	std	Y+16, r1	; 0x10
    1bae:	1f 86       	std	Y+15, r1	; 0x0f
    1bb0:	86 c0       	rjmp	.+268    	; 0x1cbe <main+0x5f4>
           {
        	   switch(operations_array[i])
    1bb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bb4:	98 89       	ldd	r25, Y+16	; 0x10
    1bb6:	9c 01       	movw	r18, r24
    1bb8:	22 0f       	add	r18, r18
    1bba:	33 1f       	adc	r19, r19
    1bbc:	8f 89       	ldd	r24, Y+23	; 0x17
    1bbe:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	e2 0f       	add	r30, r18
    1bc4:	f3 1f       	adc	r31, r19
    1bc6:	80 81       	ld	r24, Z
    1bc8:	91 81       	ldd	r25, Z+1	; 0x01
    1bca:	99 ab       	std	Y+49, r25	; 0x31
    1bcc:	88 ab       	std	Y+48, r24	; 0x30
    1bce:	a8 a9       	ldd	r26, Y+48	; 0x30
    1bd0:	b9 a9       	ldd	r27, Y+49	; 0x31
    1bd2:	ab 32       	cpi	r26, 0x2B	; 43
    1bd4:	b1 05       	cpc	r27, r1
    1bd6:	b9 f0       	breq	.+46     	; 0x1c06 <main+0x53c>
    1bd8:	48 a9       	ldd	r20, Y+48	; 0x30
    1bda:	59 a9       	ldd	r21, Y+49	; 0x31
    1bdc:	4c 32       	cpi	r20, 0x2C	; 44
    1bde:	51 05       	cpc	r21, r1
    1be0:	34 f4       	brge	.+12     	; 0x1bee <main+0x524>
    1be2:	88 a9       	ldd	r24, Y+48	; 0x30
    1be4:	99 a9       	ldd	r25, Y+49	; 0x31
    1be6:	8a 32       	cpi	r24, 0x2A	; 42
    1be8:	91 05       	cpc	r25, r1
    1bea:	a9 f1       	breq	.+106    	; 0x1c56 <main+0x58c>
    1bec:	63 c0       	rjmp	.+198    	; 0x1cb4 <main+0x5ea>
    1bee:	a8 a9       	ldd	r26, Y+48	; 0x30
    1bf0:	b9 a9       	ldd	r27, Y+49	; 0x31
    1bf2:	ad 32       	cpi	r26, 0x2D	; 45
    1bf4:	b1 05       	cpc	r27, r1
    1bf6:	d9 f0       	breq	.+54     	; 0x1c2e <main+0x564>
    1bf8:	48 a9       	ldd	r20, Y+48	; 0x30
    1bfa:	59 a9       	ldd	r21, Y+49	; 0x31
    1bfc:	4f 32       	cpi	r20, 0x2F	; 47
    1bfe:	51 05       	cpc	r21, r1
    1c00:	09 f4       	brne	.+2      	; 0x1c04 <main+0x53a>
    1c02:	43 c0       	rjmp	.+134    	; 0x1c8a <main+0x5c0>
    1c04:	57 c0       	rjmp	.+174    	; 0x1cb4 <main+0x5ea>
        	   {
        	   case '+' : result +=numbers_array[i+1];
    1c06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c08:	98 89       	ldd	r25, Y+16	; 0x10
    1c0a:	01 96       	adiw	r24, 0x01	; 1
    1c0c:	9c 01       	movw	r18, r24
    1c0e:	22 0f       	add	r18, r18
    1c10:	33 1f       	adc	r19, r19
    1c12:	8d 89       	ldd	r24, Y+21	; 0x15
    1c14:	9e 89       	ldd	r25, Y+22	; 0x16
    1c16:	fc 01       	movw	r30, r24
    1c18:	e2 0f       	add	r30, r18
    1c1a:	f3 1f       	adc	r31, r19
    1c1c:	20 81       	ld	r18, Z
    1c1e:	31 81       	ldd	r19, Z+1	; 0x01
    1c20:	89 89       	ldd	r24, Y+17	; 0x11
    1c22:	9a 89       	ldd	r25, Y+18	; 0x12
    1c24:	82 0f       	add	r24, r18
    1c26:	93 1f       	adc	r25, r19
    1c28:	9a 8b       	std	Y+18, r25	; 0x12
    1c2a:	89 8b       	std	Y+17, r24	; 0x11
    1c2c:	43 c0       	rjmp	.+134    	; 0x1cb4 <main+0x5ea>
        	              break;
        	   case '-' : result -=numbers_array[i+1];
    1c2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c30:	98 89       	ldd	r25, Y+16	; 0x10
    1c32:	01 96       	adiw	r24, 0x01	; 1
    1c34:	9c 01       	movw	r18, r24
    1c36:	22 0f       	add	r18, r18
    1c38:	33 1f       	adc	r19, r19
    1c3a:	8d 89       	ldd	r24, Y+21	; 0x15
    1c3c:	9e 89       	ldd	r25, Y+22	; 0x16
    1c3e:	fc 01       	movw	r30, r24
    1c40:	e2 0f       	add	r30, r18
    1c42:	f3 1f       	adc	r31, r19
    1c44:	20 81       	ld	r18, Z
    1c46:	31 81       	ldd	r19, Z+1	; 0x01
    1c48:	89 89       	ldd	r24, Y+17	; 0x11
    1c4a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c4c:	82 1b       	sub	r24, r18
    1c4e:	93 0b       	sbc	r25, r19
    1c50:	9a 8b       	std	Y+18, r25	; 0x12
    1c52:	89 8b       	std	Y+17, r24	; 0x11
    1c54:	2f c0       	rjmp	.+94     	; 0x1cb4 <main+0x5ea>
        	              break;
        	   case '*' : result *=numbers_array[i+1];
    1c56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c58:	98 89       	ldd	r25, Y+16	; 0x10
    1c5a:	01 96       	adiw	r24, 0x01	; 1
    1c5c:	9c 01       	movw	r18, r24
    1c5e:	22 0f       	add	r18, r18
    1c60:	33 1f       	adc	r19, r19
    1c62:	8d 89       	ldd	r24, Y+21	; 0x15
    1c64:	9e 89       	ldd	r25, Y+22	; 0x16
    1c66:	fc 01       	movw	r30, r24
    1c68:	e2 0f       	add	r30, r18
    1c6a:	f3 1f       	adc	r31, r19
    1c6c:	20 81       	ld	r18, Z
    1c6e:	31 81       	ldd	r19, Z+1	; 0x01
    1c70:	89 89       	ldd	r24, Y+17	; 0x11
    1c72:	9a 89       	ldd	r25, Y+18	; 0x12
    1c74:	dc 01       	movw	r26, r24
    1c76:	a2 9f       	mul	r26, r18
    1c78:	c0 01       	movw	r24, r0
    1c7a:	a3 9f       	mul	r26, r19
    1c7c:	90 0d       	add	r25, r0
    1c7e:	b2 9f       	mul	r27, r18
    1c80:	90 0d       	add	r25, r0
    1c82:	11 24       	eor	r1, r1
    1c84:	9a 8b       	std	Y+18, r25	; 0x12
    1c86:	89 8b       	std	Y+17, r24	; 0x11
    1c88:	15 c0       	rjmp	.+42     	; 0x1cb4 <main+0x5ea>
        	              break;
        	   case '/' : result /=numbers_array[i+1];
    1c8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c8c:	98 89       	ldd	r25, Y+16	; 0x10
    1c8e:	01 96       	adiw	r24, 0x01	; 1
    1c90:	9c 01       	movw	r18, r24
    1c92:	22 0f       	add	r18, r18
    1c94:	33 1f       	adc	r19, r19
    1c96:	8d 89       	ldd	r24, Y+21	; 0x15
    1c98:	9e 89       	ldd	r25, Y+22	; 0x16
    1c9a:	fc 01       	movw	r30, r24
    1c9c:	e2 0f       	add	r30, r18
    1c9e:	f3 1f       	adc	r31, r19
    1ca0:	20 81       	ld	r18, Z
    1ca2:	31 81       	ldd	r19, Z+1	; 0x01
    1ca4:	89 89       	ldd	r24, Y+17	; 0x11
    1ca6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ca8:	b9 01       	movw	r22, r18
    1caa:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__divmodhi4>
    1cae:	cb 01       	movw	r24, r22
    1cb0:	9a 8b       	std	Y+18, r25	; 0x12
    1cb2:	89 8b       	std	Y+17, r24	; 0x11
        	   ++s;
           }


           sint16 result=numbers_array[0];
           for(sint16 i=0;i<operations_count;i++)
    1cb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cb6:	98 89       	ldd	r25, Y+16	; 0x10
    1cb8:	01 96       	adiw	r24, 0x01	; 1
    1cba:	98 8b       	std	Y+16, r25	; 0x10
    1cbc:	8f 87       	std	Y+15, r24	; 0x0f
    1cbe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cc0:	28 2f       	mov	r18, r24
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cc6:	98 89       	ldd	r25, Y+16	; 0x10
    1cc8:	82 17       	cp	r24, r18
    1cca:	93 07       	cpc	r25, r19
    1ccc:	0c f4       	brge	.+2      	; 0x1cd0 <main+0x606>
    1cce:	71 cf       	rjmp	.-286    	; 0x1bb2 <main+0x4e8>

        	   }
           }


             LCD_intgerToString(result);
    1cd0:	89 89       	ldd	r24, Y+17	; 0x11
    1cd2:	9a 89       	ldd	r25, Y+18	; 0x12
    1cd4:	0e 94 38 0b 	call	0x1670	; 0x1670 <LCD_intgerToString>
    1cd8:	07 c0       	rjmp	.+14     	; 0x1ce8 <main+0x61e>
		}
		else
		{

			 LCD_displayStringRowColumn(1,0,"ERROR INPUT");
    1cda:	20 e6       	ldi	r18, 0x60	; 96
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	60 e0       	ldi	r22, 0x00	; 0
    1ce2:	a9 01       	movw	r20, r18
    1ce4:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>

		}

		 while(KeyPad_getPressedKey() != 13);
    1ce8:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    1cec:	8d 30       	cpi	r24, 0x0D	; 13
    1cee:	e1 f7       	brne	.-8      	; 0x1ce8 <main+0x61e>
			 LCD_init();
    1cf0:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCD_init>



		i=0;
    1cf4:	1e 8e       	std	Y+30, r1	; 0x1e
    1cf6:	00 cd       	rjmp	.-1536   	; 0x16f8 <main+0x2e>

00001cf8 <check_input_correct>:




uint8 check_input_correct(uint8 * const input)
{
    1cf8:	df 93       	push	r29
    1cfa:	cf 93       	push	r28
    1cfc:	cd b7       	in	r28, 0x3d	; 61
    1cfe:	de b7       	in	r29, 0x3e	; 62
    1d00:	27 97       	sbiw	r28, 0x07	; 7
    1d02:	0f b6       	in	r0, 0x3f	; 63
    1d04:	f8 94       	cli
    1d06:	de bf       	out	0x3e, r29	; 62
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	cd bf       	out	0x3d, r28	; 61
    1d0c:	9e 83       	std	Y+6, r25	; 0x06
    1d0e:	8d 83       	std	Y+5, r24	; 0x05

	uint8 j=0;
    1d10:	1c 82       	std	Y+4, r1	; 0x04
    1d12:	3f c1       	rjmp	.+638    	; 0x1f92 <check_input_correct+0x29a>
	while(input[j] != '\0')
	{
		uint8 l=0;
    1d14:	1b 82       	std	Y+3, r1	; 0x03
    1d16:	1e c0       	rjmp	.+60     	; 0x1d54 <check_input_correct+0x5c>
		while(input[l] !='\0')
		{
			if(input[l]!='=' && input[l+1]=='\0')
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d20:	9e 81       	ldd	r25, Y+6	; 0x06
    1d22:	fc 01       	movw	r30, r24
    1d24:	e2 0f       	add	r30, r18
    1d26:	f3 1f       	adc	r31, r19
    1d28:	80 81       	ld	r24, Z
    1d2a:	8d 33       	cpi	r24, 0x3D	; 61
    1d2c:	81 f0       	breq	.+32     	; 0x1d4e <check_input_correct+0x56>
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	88 2f       	mov	r24, r24
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	9c 01       	movw	r18, r24
    1d36:	2f 5f       	subi	r18, 0xFF	; 255
    1d38:	3f 4f       	sbci	r19, 0xFF	; 255
    1d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3e:	fc 01       	movw	r30, r24
    1d40:	e2 0f       	add	r30, r18
    1d42:	f3 1f       	adc	r31, r19
    1d44:	80 81       	ld	r24, Z
    1d46:	88 23       	and	r24, r24
    1d48:	11 f4       	brne	.+4      	; 0x1d4e <check_input_correct+0x56>
			{
				return 0;
    1d4a:	1f 82       	std	Y+7, r1	; 0x07
    1d4c:	30 c1       	rjmp	.+608    	; 0x1fae <check_input_correct+0x2b6>
			}
			++l;
    1d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d50:	8f 5f       	subi	r24, 0xFF	; 255
    1d52:	8b 83       	std	Y+3, r24	; 0x03

	uint8 j=0;
	while(input[j] != '\0')
	{
		uint8 l=0;
		while(input[l] !='\0')
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5e:	fc 01       	movw	r30, r24
    1d60:	e2 0f       	add	r30, r18
    1d62:	f3 1f       	adc	r31, r19
    1d64:	80 81       	ld	r24, Z
    1d66:	88 23       	and	r24, r24
    1d68:	b9 f6       	brne	.-82     	; 0x1d18 <check_input_correct+0x20>
				return 0;
			}
			++l;
		}

		uint8 m=0;
    1d6a:	1a 82       	std	Y+2, r1	; 0x02
		uint8 flag=1;
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	89 83       	std	Y+1, r24	; 0x01
    1d70:	30 c0       	rjmp	.+96     	; 0x1dd2 <check_input_correct+0xda>
		while(input[m] !='\0')
		{
			if((input[m] == '+' || input[m] == '-' ||input[m] == '*' ||input[m] == '/') )
    1d72:	8a 81       	ldd	r24, Y+2	; 0x02
    1d74:	28 2f       	mov	r18, r24
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7c:	fc 01       	movw	r30, r24
    1d7e:	e2 0f       	add	r30, r18
    1d80:	f3 1f       	adc	r31, r19
    1d82:	80 81       	ld	r24, Z
    1d84:	8b 32       	cpi	r24, 0x2B	; 43
    1d86:	09 f1       	breq	.+66     	; 0x1dca <check_input_correct+0xd2>
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d90:	9e 81       	ldd	r25, Y+6	; 0x06
    1d92:	fc 01       	movw	r30, r24
    1d94:	e2 0f       	add	r30, r18
    1d96:	f3 1f       	adc	r31, r19
    1d98:	80 81       	ld	r24, Z
    1d9a:	8d 32       	cpi	r24, 0x2D	; 45
    1d9c:	b1 f0       	breq	.+44     	; 0x1dca <check_input_correct+0xd2>
    1d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1da0:	28 2f       	mov	r18, r24
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	8d 81       	ldd	r24, Y+5	; 0x05
    1da6:	9e 81       	ldd	r25, Y+6	; 0x06
    1da8:	fc 01       	movw	r30, r24
    1daa:	e2 0f       	add	r30, r18
    1dac:	f3 1f       	adc	r31, r19
    1dae:	80 81       	ld	r24, Z
    1db0:	8a 32       	cpi	r24, 0x2A	; 42
    1db2:	59 f0       	breq	.+22     	; 0x1dca <check_input_correct+0xd2>
    1db4:	8a 81       	ldd	r24, Y+2	; 0x02
    1db6:	28 2f       	mov	r18, r24
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	e2 0f       	add	r30, r18
    1dc2:	f3 1f       	adc	r31, r19
    1dc4:	80 81       	ld	r24, Z
    1dc6:	8f 32       	cpi	r24, 0x2F	; 47
    1dc8:	09 f4       	brne	.+2      	; 0x1dcc <check_input_correct+0xd4>
			{
				flag=0;
    1dca:	19 82       	std	Y+1, r1	; 0x01
			}
			++m;
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	8f 5f       	subi	r24, 0xFF	; 255
    1dd0:	8a 83       	std	Y+2, r24	; 0x02
			++l;
		}

		uint8 m=0;
		uint8 flag=1;
		while(input[m] !='\0')
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	28 2f       	mov	r18, r24
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dda:	9e 81       	ldd	r25, Y+6	; 0x06
    1ddc:	fc 01       	movw	r30, r24
    1dde:	e2 0f       	add	r30, r18
    1de0:	f3 1f       	adc	r31, r19
    1de2:	80 81       	ld	r24, Z
    1de4:	88 23       	and	r24, r24
    1de6:	29 f6       	brne	.-118    	; 0x1d72 <check_input_correct+0x7a>
			{
				flag=0;
			}
			++m;
		}
		if(flag==1)
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	81 30       	cpi	r24, 0x01	; 1
    1dec:	11 f4       	brne	.+4      	; 0x1df2 <check_input_correct+0xfa>
		{
			return 0;
    1dee:	1f 82       	std	Y+7, r1	; 0x07
    1df0:	de c0       	rjmp	.+444    	; 0x1fae <check_input_correct+0x2b6>
		}

		if( (input[j] == '+' || input[j] == '-' ||input[j] == '*' ||input[j] == '/') &&(input[j+1] == '+' || input[j+1] == '-' ||input[j+1] == '*' ||input[j+1] == '/' || input[j+1]=='=') && (input[j+1]!='\0'))
    1df2:	8c 81       	ldd	r24, Y+4	; 0x04
    1df4:	28 2f       	mov	r18, r24
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfc:	fc 01       	movw	r30, r24
    1dfe:	e2 0f       	add	r30, r18
    1e00:	f3 1f       	adc	r31, r19
    1e02:	80 81       	ld	r24, Z
    1e04:	8b 32       	cpi	r24, 0x2B	; 43
    1e06:	11 f1       	breq	.+68     	; 0x1e4c <check_input_correct+0x154>
    1e08:	8c 81       	ldd	r24, Y+4	; 0x04
    1e0a:	28 2f       	mov	r18, r24
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e10:	9e 81       	ldd	r25, Y+6	; 0x06
    1e12:	fc 01       	movw	r30, r24
    1e14:	e2 0f       	add	r30, r18
    1e16:	f3 1f       	adc	r31, r19
    1e18:	80 81       	ld	r24, Z
    1e1a:	8d 32       	cpi	r24, 0x2D	; 45
    1e1c:	b9 f0       	breq	.+46     	; 0x1e4c <check_input_correct+0x154>
    1e1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e20:	28 2f       	mov	r18, r24
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	8d 81       	ldd	r24, Y+5	; 0x05
    1e26:	9e 81       	ldd	r25, Y+6	; 0x06
    1e28:	fc 01       	movw	r30, r24
    1e2a:	e2 0f       	add	r30, r18
    1e2c:	f3 1f       	adc	r31, r19
    1e2e:	80 81       	ld	r24, Z
    1e30:	8a 32       	cpi	r24, 0x2A	; 42
    1e32:	61 f0       	breq	.+24     	; 0x1e4c <check_input_correct+0x154>
    1e34:	8c 81       	ldd	r24, Y+4	; 0x04
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3e:	fc 01       	movw	r30, r24
    1e40:	e2 0f       	add	r30, r18
    1e42:	f3 1f       	adc	r31, r19
    1e44:	80 81       	ld	r24, Z
    1e46:	8f 32       	cpi	r24, 0x2F	; 47
    1e48:	09 f0       	breq	.+2      	; 0x1e4c <check_input_correct+0x154>
    1e4a:	56 c0       	rjmp	.+172    	; 0x1ef8 <check_input_correct+0x200>
    1e4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e4e:	88 2f       	mov	r24, r24
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	9c 01       	movw	r18, r24
    1e54:	2f 5f       	subi	r18, 0xFF	; 255
    1e56:	3f 4f       	sbci	r19, 0xFF	; 255
    1e58:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	e2 0f       	add	r30, r18
    1e60:	f3 1f       	adc	r31, r19
    1e62:	80 81       	ld	r24, Z
    1e64:	8b 32       	cpi	r24, 0x2B	; 43
    1e66:	c1 f1       	breq	.+112    	; 0x1ed8 <check_input_correct+0x1e0>
    1e68:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6a:	88 2f       	mov	r24, r24
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	9c 01       	movw	r18, r24
    1e70:	2f 5f       	subi	r18, 0xFF	; 255
    1e72:	3f 4f       	sbci	r19, 0xFF	; 255
    1e74:	8d 81       	ldd	r24, Y+5	; 0x05
    1e76:	9e 81       	ldd	r25, Y+6	; 0x06
    1e78:	fc 01       	movw	r30, r24
    1e7a:	e2 0f       	add	r30, r18
    1e7c:	f3 1f       	adc	r31, r19
    1e7e:	80 81       	ld	r24, Z
    1e80:	8d 32       	cpi	r24, 0x2D	; 45
    1e82:	51 f1       	breq	.+84     	; 0x1ed8 <check_input_correct+0x1e0>
    1e84:	8c 81       	ldd	r24, Y+4	; 0x04
    1e86:	88 2f       	mov	r24, r24
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	9c 01       	movw	r18, r24
    1e8c:	2f 5f       	subi	r18, 0xFF	; 255
    1e8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e90:	8d 81       	ldd	r24, Y+5	; 0x05
    1e92:	9e 81       	ldd	r25, Y+6	; 0x06
    1e94:	fc 01       	movw	r30, r24
    1e96:	e2 0f       	add	r30, r18
    1e98:	f3 1f       	adc	r31, r19
    1e9a:	80 81       	ld	r24, Z
    1e9c:	8a 32       	cpi	r24, 0x2A	; 42
    1e9e:	e1 f0       	breq	.+56     	; 0x1ed8 <check_input_correct+0x1e0>
    1ea0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea2:	88 2f       	mov	r24, r24
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	9c 01       	movw	r18, r24
    1ea8:	2f 5f       	subi	r18, 0xFF	; 255
    1eaa:	3f 4f       	sbci	r19, 0xFF	; 255
    1eac:	8d 81       	ldd	r24, Y+5	; 0x05
    1eae:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	e2 0f       	add	r30, r18
    1eb4:	f3 1f       	adc	r31, r19
    1eb6:	80 81       	ld	r24, Z
    1eb8:	8f 32       	cpi	r24, 0x2F	; 47
    1eba:	71 f0       	breq	.+28     	; 0x1ed8 <check_input_correct+0x1e0>
    1ebc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ebe:	88 2f       	mov	r24, r24
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	9c 01       	movw	r18, r24
    1ec4:	2f 5f       	subi	r18, 0xFF	; 255
    1ec6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ecc:	fc 01       	movw	r30, r24
    1ece:	e2 0f       	add	r30, r18
    1ed0:	f3 1f       	adc	r31, r19
    1ed2:	80 81       	ld	r24, Z
    1ed4:	8d 33       	cpi	r24, 0x3D	; 61
    1ed6:	81 f4       	brne	.+32     	; 0x1ef8 <check_input_correct+0x200>
    1ed8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eda:	88 2f       	mov	r24, r24
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	9c 01       	movw	r18, r24
    1ee0:	2f 5f       	subi	r18, 0xFF	; 255
    1ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee8:	fc 01       	movw	r30, r24
    1eea:	e2 0f       	add	r30, r18
    1eec:	f3 1f       	adc	r31, r19
    1eee:	80 81       	ld	r24, Z
    1ef0:	88 23       	and	r24, r24
    1ef2:	11 f0       	breq	.+4      	; 0x1ef8 <check_input_correct+0x200>
		{
			return 0;
    1ef4:	1f 82       	std	Y+7, r1	; 0x07
    1ef6:	5b c0       	rjmp	.+182    	; 0x1fae <check_input_correct+0x2b6>
		}

		if((input[j] == '+' || input[j] == '-' ||input[j] == '*' ||input[j] == '/') && (j==0 || j==15))
    1ef8:	8c 81       	ldd	r24, Y+4	; 0x04
    1efa:	28 2f       	mov	r18, r24
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	8d 81       	ldd	r24, Y+5	; 0x05
    1f00:	9e 81       	ldd	r25, Y+6	; 0x06
    1f02:	fc 01       	movw	r30, r24
    1f04:	e2 0f       	add	r30, r18
    1f06:	f3 1f       	adc	r31, r19
    1f08:	80 81       	ld	r24, Z
    1f0a:	8b 32       	cpi	r24, 0x2B	; 43
    1f0c:	09 f1       	breq	.+66     	; 0x1f50 <check_input_correct+0x258>
    1f0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	8d 81       	ldd	r24, Y+5	; 0x05
    1f16:	9e 81       	ldd	r25, Y+6	; 0x06
    1f18:	fc 01       	movw	r30, r24
    1f1a:	e2 0f       	add	r30, r18
    1f1c:	f3 1f       	adc	r31, r19
    1f1e:	80 81       	ld	r24, Z
    1f20:	8d 32       	cpi	r24, 0x2D	; 45
    1f22:	b1 f0       	breq	.+44     	; 0x1f50 <check_input_correct+0x258>
    1f24:	8c 81       	ldd	r24, Y+4	; 0x04
    1f26:	28 2f       	mov	r18, r24
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2e:	fc 01       	movw	r30, r24
    1f30:	e2 0f       	add	r30, r18
    1f32:	f3 1f       	adc	r31, r19
    1f34:	80 81       	ld	r24, Z
    1f36:	8a 32       	cpi	r24, 0x2A	; 42
    1f38:	59 f0       	breq	.+22     	; 0x1f50 <check_input_correct+0x258>
    1f3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3c:	28 2f       	mov	r18, r24
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	8d 81       	ldd	r24, Y+5	; 0x05
    1f42:	9e 81       	ldd	r25, Y+6	; 0x06
    1f44:	fc 01       	movw	r30, r24
    1f46:	e2 0f       	add	r30, r18
    1f48:	f3 1f       	adc	r31, r19
    1f4a:	80 81       	ld	r24, Z
    1f4c:	8f 32       	cpi	r24, 0x2F	; 47
    1f4e:	41 f4       	brne	.+16     	; 0x1f60 <check_input_correct+0x268>
    1f50:	8c 81       	ldd	r24, Y+4	; 0x04
    1f52:	88 23       	and	r24, r24
    1f54:	19 f0       	breq	.+6      	; 0x1f5c <check_input_correct+0x264>
    1f56:	8c 81       	ldd	r24, Y+4	; 0x04
    1f58:	8f 30       	cpi	r24, 0x0F	; 15
    1f5a:	11 f4       	brne	.+4      	; 0x1f60 <check_input_correct+0x268>
		{
			return 0;
    1f5c:	1f 82       	std	Y+7, r1	; 0x07
    1f5e:	27 c0       	rjmp	.+78     	; 0x1fae <check_input_correct+0x2b6>
		}

		if(input[j] == '=')
    1f60:	8c 81       	ldd	r24, Y+4	; 0x04
    1f62:	28 2f       	mov	r18, r24
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	8d 81       	ldd	r24, Y+5	; 0x05
    1f68:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	e2 0f       	add	r30, r18
    1f6e:	f3 1f       	adc	r31, r19
    1f70:	80 81       	ld	r24, Z
    1f72:	8d 33       	cpi	r24, 0x3D	; 61
    1f74:	59 f4       	brne	.+22     	; 0x1f8c <check_input_correct+0x294>
		{
			if(j==0 || j==1 || j==2)
    1f76:	8c 81       	ldd	r24, Y+4	; 0x04
    1f78:	88 23       	and	r24, r24
    1f7a:	31 f0       	breq	.+12     	; 0x1f88 <check_input_correct+0x290>
    1f7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f7e:	81 30       	cpi	r24, 0x01	; 1
    1f80:	19 f0       	breq	.+6      	; 0x1f88 <check_input_correct+0x290>
    1f82:	8c 81       	ldd	r24, Y+4	; 0x04
    1f84:	82 30       	cpi	r24, 0x02	; 2
    1f86:	11 f4       	brne	.+4      	; 0x1f8c <check_input_correct+0x294>
			{
				return 0;
    1f88:	1f 82       	std	Y+7, r1	; 0x07
    1f8a:	11 c0       	rjmp	.+34     	; 0x1fae <check_input_correct+0x2b6>
			}
		}

		++j;
    1f8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8e:	8f 5f       	subi	r24, 0xFF	; 255
    1f90:	8c 83       	std	Y+4, r24	; 0x04

uint8 check_input_correct(uint8 * const input)
{

	uint8 j=0;
	while(input[j] != '\0')
    1f92:	8c 81       	ldd	r24, Y+4	; 0x04
    1f94:	28 2f       	mov	r18, r24
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9c:	fc 01       	movw	r30, r24
    1f9e:	e2 0f       	add	r30, r18
    1fa0:	f3 1f       	adc	r31, r19
    1fa2:	80 81       	ld	r24, Z
    1fa4:	88 23       	and	r24, r24
    1fa6:	09 f0       	breq	.+2      	; 0x1faa <check_input_correct+0x2b2>
    1fa8:	b5 ce       	rjmp	.-662    	; 0x1d14 <check_input_correct+0x1c>
			}
		}

		++j;
	}
	return 1;
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	8f 83       	std	Y+7, r24	; 0x07
    1fae:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1fb0:	27 96       	adiw	r28, 0x07	; 7
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	f8 94       	cli
    1fb6:	de bf       	out	0x3e, r29	; 62
    1fb8:	0f be       	out	0x3f, r0	; 63
    1fba:	cd bf       	out	0x3d, r28	; 61
    1fbc:	cf 91       	pop	r28
    1fbe:	df 91       	pop	r29
    1fc0:	08 95       	ret

00001fc2 <__divmodhi4>:
    1fc2:	97 fb       	bst	r25, 7
    1fc4:	09 2e       	mov	r0, r25
    1fc6:	07 26       	eor	r0, r23
    1fc8:	0a d0       	rcall	.+20     	; 0x1fde <__divmodhi4_neg1>
    1fca:	77 fd       	sbrc	r23, 7
    1fcc:	04 d0       	rcall	.+8      	; 0x1fd6 <__divmodhi4_neg2>
    1fce:	0c d0       	rcall	.+24     	; 0x1fe8 <__udivmodhi4>
    1fd0:	06 d0       	rcall	.+12     	; 0x1fde <__divmodhi4_neg1>
    1fd2:	00 20       	and	r0, r0
    1fd4:	1a f4       	brpl	.+6      	; 0x1fdc <__divmodhi4_exit>

00001fd6 <__divmodhi4_neg2>:
    1fd6:	70 95       	com	r23
    1fd8:	61 95       	neg	r22
    1fda:	7f 4f       	sbci	r23, 0xFF	; 255

00001fdc <__divmodhi4_exit>:
    1fdc:	08 95       	ret

00001fde <__divmodhi4_neg1>:
    1fde:	f6 f7       	brtc	.-4      	; 0x1fdc <__divmodhi4_exit>
    1fe0:	90 95       	com	r25
    1fe2:	81 95       	neg	r24
    1fe4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe6:	08 95       	ret

00001fe8 <__udivmodhi4>:
    1fe8:	aa 1b       	sub	r26, r26
    1fea:	bb 1b       	sub	r27, r27
    1fec:	51 e1       	ldi	r21, 0x11	; 17
    1fee:	07 c0       	rjmp	.+14     	; 0x1ffe <__udivmodhi4_ep>

00001ff0 <__udivmodhi4_loop>:
    1ff0:	aa 1f       	adc	r26, r26
    1ff2:	bb 1f       	adc	r27, r27
    1ff4:	a6 17       	cp	r26, r22
    1ff6:	b7 07       	cpc	r27, r23
    1ff8:	10 f0       	brcs	.+4      	; 0x1ffe <__udivmodhi4_ep>
    1ffa:	a6 1b       	sub	r26, r22
    1ffc:	b7 0b       	sbc	r27, r23

00001ffe <__udivmodhi4_ep>:
    1ffe:	88 1f       	adc	r24, r24
    2000:	99 1f       	adc	r25, r25
    2002:	5a 95       	dec	r21
    2004:	a9 f7       	brne	.-22     	; 0x1ff0 <__udivmodhi4_loop>
    2006:	80 95       	com	r24
    2008:	90 95       	com	r25
    200a:	bc 01       	movw	r22, r24
    200c:	cd 01       	movw	r24, r26
    200e:	08 95       	ret

00002010 <__prologue_saves__>:
    2010:	2f 92       	push	r2
    2012:	3f 92       	push	r3
    2014:	4f 92       	push	r4
    2016:	5f 92       	push	r5
    2018:	6f 92       	push	r6
    201a:	7f 92       	push	r7
    201c:	8f 92       	push	r8
    201e:	9f 92       	push	r9
    2020:	af 92       	push	r10
    2022:	bf 92       	push	r11
    2024:	cf 92       	push	r12
    2026:	df 92       	push	r13
    2028:	ef 92       	push	r14
    202a:	ff 92       	push	r15
    202c:	0f 93       	push	r16
    202e:	1f 93       	push	r17
    2030:	cf 93       	push	r28
    2032:	df 93       	push	r29
    2034:	cd b7       	in	r28, 0x3d	; 61
    2036:	de b7       	in	r29, 0x3e	; 62
    2038:	ca 1b       	sub	r28, r26
    203a:	db 0b       	sbc	r29, r27
    203c:	0f b6       	in	r0, 0x3f	; 63
    203e:	f8 94       	cli
    2040:	de bf       	out	0x3e, r29	; 62
    2042:	0f be       	out	0x3f, r0	; 63
    2044:	cd bf       	out	0x3d, r28	; 61
    2046:	09 94       	ijmp

00002048 <__epilogue_restores__>:
    2048:	2a 88       	ldd	r2, Y+18	; 0x12
    204a:	39 88       	ldd	r3, Y+17	; 0x11
    204c:	48 88       	ldd	r4, Y+16	; 0x10
    204e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2050:	6e 84       	ldd	r6, Y+14	; 0x0e
    2052:	7d 84       	ldd	r7, Y+13	; 0x0d
    2054:	8c 84       	ldd	r8, Y+12	; 0x0c
    2056:	9b 84       	ldd	r9, Y+11	; 0x0b
    2058:	aa 84       	ldd	r10, Y+10	; 0x0a
    205a:	b9 84       	ldd	r11, Y+9	; 0x09
    205c:	c8 84       	ldd	r12, Y+8	; 0x08
    205e:	df 80       	ldd	r13, Y+7	; 0x07
    2060:	ee 80       	ldd	r14, Y+6	; 0x06
    2062:	fd 80       	ldd	r15, Y+5	; 0x05
    2064:	0c 81       	ldd	r16, Y+4	; 0x04
    2066:	1b 81       	ldd	r17, Y+3	; 0x03
    2068:	aa 81       	ldd	r26, Y+2	; 0x02
    206a:	b9 81       	ldd	r27, Y+1	; 0x01
    206c:	ce 0f       	add	r28, r30
    206e:	d1 1d       	adc	r29, r1
    2070:	0f b6       	in	r0, 0x3f	; 63
    2072:	f8 94       	cli
    2074:	de bf       	out	0x3e, r29	; 62
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	cd bf       	out	0x3d, r28	; 61
    207a:	ed 01       	movw	r28, r26
    207c:	08 95       	ret

0000207e <malloc>:
    207e:	cf 93       	push	r28
    2080:	df 93       	push	r29
    2082:	bc 01       	movw	r22, r24
    2084:	82 30       	cpi	r24, 0x02	; 2
    2086:	91 05       	cpc	r25, r1
    2088:	10 f4       	brcc	.+4      	; 0x208e <malloc+0x10>
    208a:	62 e0       	ldi	r22, 0x02	; 2
    208c:	70 e0       	ldi	r23, 0x00	; 0
    208e:	a0 91 7c 00 	lds	r26, 0x007C
    2092:	b0 91 7d 00 	lds	r27, 0x007D
    2096:	ed 01       	movw	r28, r26
    2098:	e0 e0       	ldi	r30, 0x00	; 0
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	40 e0       	ldi	r20, 0x00	; 0
    209e:	50 e0       	ldi	r21, 0x00	; 0
    20a0:	21 c0       	rjmp	.+66     	; 0x20e4 <malloc+0x66>
    20a2:	88 81       	ld	r24, Y
    20a4:	99 81       	ldd	r25, Y+1	; 0x01
    20a6:	86 17       	cp	r24, r22
    20a8:	97 07       	cpc	r25, r23
    20aa:	69 f4       	brne	.+26     	; 0x20c6 <malloc+0x48>
    20ac:	8a 81       	ldd	r24, Y+2	; 0x02
    20ae:	9b 81       	ldd	r25, Y+3	; 0x03
    20b0:	30 97       	sbiw	r30, 0x00	; 0
    20b2:	19 f0       	breq	.+6      	; 0x20ba <malloc+0x3c>
    20b4:	93 83       	std	Z+3, r25	; 0x03
    20b6:	82 83       	std	Z+2, r24	; 0x02
    20b8:	04 c0       	rjmp	.+8      	; 0x20c2 <malloc+0x44>
    20ba:	90 93 7d 00 	sts	0x007D, r25
    20be:	80 93 7c 00 	sts	0x007C, r24
    20c2:	fe 01       	movw	r30, r28
    20c4:	34 c0       	rjmp	.+104    	; 0x212e <malloc+0xb0>
    20c6:	68 17       	cp	r22, r24
    20c8:	79 07       	cpc	r23, r25
    20ca:	38 f4       	brcc	.+14     	; 0x20da <malloc+0x5c>
    20cc:	41 15       	cp	r20, r1
    20ce:	51 05       	cpc	r21, r1
    20d0:	19 f0       	breq	.+6      	; 0x20d8 <malloc+0x5a>
    20d2:	84 17       	cp	r24, r20
    20d4:	95 07       	cpc	r25, r21
    20d6:	08 f4       	brcc	.+2      	; 0x20da <malloc+0x5c>
    20d8:	ac 01       	movw	r20, r24
    20da:	fe 01       	movw	r30, r28
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
    20de:	9b 81       	ldd	r25, Y+3	; 0x03
    20e0:	9c 01       	movw	r18, r24
    20e2:	e9 01       	movw	r28, r18
    20e4:	20 97       	sbiw	r28, 0x00	; 0
    20e6:	e9 f6       	brne	.-70     	; 0x20a2 <malloc+0x24>
    20e8:	41 15       	cp	r20, r1
    20ea:	51 05       	cpc	r21, r1
    20ec:	a9 f1       	breq	.+106    	; 0x2158 <malloc+0xda>
    20ee:	ca 01       	movw	r24, r20
    20f0:	86 1b       	sub	r24, r22
    20f2:	97 0b       	sbc	r25, r23
    20f4:	04 97       	sbiw	r24, 0x04	; 4
    20f6:	08 f4       	brcc	.+2      	; 0x20fa <malloc+0x7c>
    20f8:	ba 01       	movw	r22, r20
    20fa:	e0 e0       	ldi	r30, 0x00	; 0
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	2a c0       	rjmp	.+84     	; 0x2154 <malloc+0xd6>
    2100:	8d 91       	ld	r24, X+
    2102:	9c 91       	ld	r25, X
    2104:	11 97       	sbiw	r26, 0x01	; 1
    2106:	84 17       	cp	r24, r20
    2108:	95 07       	cpc	r25, r21
    210a:	f9 f4       	brne	.+62     	; 0x214a <malloc+0xcc>
    210c:	64 17       	cp	r22, r20
    210e:	75 07       	cpc	r23, r21
    2110:	81 f4       	brne	.+32     	; 0x2132 <malloc+0xb4>
    2112:	12 96       	adiw	r26, 0x02	; 2
    2114:	8d 91       	ld	r24, X+
    2116:	9c 91       	ld	r25, X
    2118:	13 97       	sbiw	r26, 0x03	; 3
    211a:	30 97       	sbiw	r30, 0x00	; 0
    211c:	19 f0       	breq	.+6      	; 0x2124 <malloc+0xa6>
    211e:	93 83       	std	Z+3, r25	; 0x03
    2120:	82 83       	std	Z+2, r24	; 0x02
    2122:	04 c0       	rjmp	.+8      	; 0x212c <malloc+0xae>
    2124:	90 93 7d 00 	sts	0x007D, r25
    2128:	80 93 7c 00 	sts	0x007C, r24
    212c:	fd 01       	movw	r30, r26
    212e:	32 96       	adiw	r30, 0x02	; 2
    2130:	4f c0       	rjmp	.+158    	; 0x21d0 <malloc+0x152>
    2132:	ca 01       	movw	r24, r20
    2134:	86 1b       	sub	r24, r22
    2136:	97 0b       	sbc	r25, r23
    2138:	fd 01       	movw	r30, r26
    213a:	e8 0f       	add	r30, r24
    213c:	f9 1f       	adc	r31, r25
    213e:	61 93       	st	Z+, r22
    2140:	71 93       	st	Z+, r23
    2142:	02 97       	sbiw	r24, 0x02	; 2
    2144:	8d 93       	st	X+, r24
    2146:	9c 93       	st	X, r25
    2148:	43 c0       	rjmp	.+134    	; 0x21d0 <malloc+0x152>
    214a:	fd 01       	movw	r30, r26
    214c:	82 81       	ldd	r24, Z+2	; 0x02
    214e:	93 81       	ldd	r25, Z+3	; 0x03
    2150:	9c 01       	movw	r18, r24
    2152:	d9 01       	movw	r26, r18
    2154:	10 97       	sbiw	r26, 0x00	; 0
    2156:	a1 f6       	brne	.-88     	; 0x2100 <malloc+0x82>
    2158:	80 91 7a 00 	lds	r24, 0x007A
    215c:	90 91 7b 00 	lds	r25, 0x007B
    2160:	89 2b       	or	r24, r25
    2162:	41 f4       	brne	.+16     	; 0x2174 <malloc+0xf6>
    2164:	80 91 76 00 	lds	r24, 0x0076
    2168:	90 91 77 00 	lds	r25, 0x0077
    216c:	90 93 7b 00 	sts	0x007B, r25
    2170:	80 93 7a 00 	sts	0x007A, r24
    2174:	40 91 78 00 	lds	r20, 0x0078
    2178:	50 91 79 00 	lds	r21, 0x0079
    217c:	41 15       	cp	r20, r1
    217e:	51 05       	cpc	r21, r1
    2180:	41 f4       	brne	.+16     	; 0x2192 <malloc+0x114>
    2182:	4d b7       	in	r20, 0x3d	; 61
    2184:	5e b7       	in	r21, 0x3e	; 62
    2186:	80 91 74 00 	lds	r24, 0x0074
    218a:	90 91 75 00 	lds	r25, 0x0075
    218e:	48 1b       	sub	r20, r24
    2190:	59 0b       	sbc	r21, r25
    2192:	20 91 7a 00 	lds	r18, 0x007A
    2196:	30 91 7b 00 	lds	r19, 0x007B
    219a:	24 17       	cp	r18, r20
    219c:	35 07       	cpc	r19, r21
    219e:	b0 f4       	brcc	.+44     	; 0x21cc <malloc+0x14e>
    21a0:	ca 01       	movw	r24, r20
    21a2:	82 1b       	sub	r24, r18
    21a4:	93 0b       	sbc	r25, r19
    21a6:	86 17       	cp	r24, r22
    21a8:	97 07       	cpc	r25, r23
    21aa:	80 f0       	brcs	.+32     	; 0x21cc <malloc+0x14e>
    21ac:	ab 01       	movw	r20, r22
    21ae:	4e 5f       	subi	r20, 0xFE	; 254
    21b0:	5f 4f       	sbci	r21, 0xFF	; 255
    21b2:	84 17       	cp	r24, r20
    21b4:	95 07       	cpc	r25, r21
    21b6:	50 f0       	brcs	.+20     	; 0x21cc <malloc+0x14e>
    21b8:	42 0f       	add	r20, r18
    21ba:	53 1f       	adc	r21, r19
    21bc:	50 93 7b 00 	sts	0x007B, r21
    21c0:	40 93 7a 00 	sts	0x007A, r20
    21c4:	f9 01       	movw	r30, r18
    21c6:	61 93       	st	Z+, r22
    21c8:	71 93       	st	Z+, r23
    21ca:	02 c0       	rjmp	.+4      	; 0x21d0 <malloc+0x152>
    21cc:	e0 e0       	ldi	r30, 0x00	; 0
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	cf 01       	movw	r24, r30
    21d2:	df 91       	pop	r29
    21d4:	cf 91       	pop	r28
    21d6:	08 95       	ret

000021d8 <free>:
    21d8:	cf 93       	push	r28
    21da:	df 93       	push	r29
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	09 f4       	brne	.+2      	; 0x21e2 <free+0xa>
    21e0:	50 c0       	rjmp	.+160    	; 0x2282 <free+0xaa>
    21e2:	ec 01       	movw	r28, r24
    21e4:	22 97       	sbiw	r28, 0x02	; 2
    21e6:	1b 82       	std	Y+3, r1	; 0x03
    21e8:	1a 82       	std	Y+2, r1	; 0x02
    21ea:	a0 91 7c 00 	lds	r26, 0x007C
    21ee:	b0 91 7d 00 	lds	r27, 0x007D
    21f2:	10 97       	sbiw	r26, 0x00	; 0
    21f4:	09 f1       	breq	.+66     	; 0x2238 <free+0x60>
    21f6:	40 e0       	ldi	r20, 0x00	; 0
    21f8:	50 e0       	ldi	r21, 0x00	; 0
    21fa:	ac 17       	cp	r26, r28
    21fc:	bd 07       	cpc	r27, r29
    21fe:	08 f1       	brcs	.+66     	; 0x2242 <free+0x6a>
    2200:	bb 83       	std	Y+3, r27	; 0x03
    2202:	aa 83       	std	Y+2, r26	; 0x02
    2204:	fe 01       	movw	r30, r28
    2206:	21 91       	ld	r18, Z+
    2208:	31 91       	ld	r19, Z+
    220a:	e2 0f       	add	r30, r18
    220c:	f3 1f       	adc	r31, r19
    220e:	ae 17       	cp	r26, r30
    2210:	bf 07       	cpc	r27, r31
    2212:	79 f4       	brne	.+30     	; 0x2232 <free+0x5a>
    2214:	8d 91       	ld	r24, X+
    2216:	9c 91       	ld	r25, X
    2218:	11 97       	sbiw	r26, 0x01	; 1
    221a:	28 0f       	add	r18, r24
    221c:	39 1f       	adc	r19, r25
    221e:	2e 5f       	subi	r18, 0xFE	; 254
    2220:	3f 4f       	sbci	r19, 0xFF	; 255
    2222:	39 83       	std	Y+1, r19	; 0x01
    2224:	28 83       	st	Y, r18
    2226:	12 96       	adiw	r26, 0x02	; 2
    2228:	8d 91       	ld	r24, X+
    222a:	9c 91       	ld	r25, X
    222c:	13 97       	sbiw	r26, 0x03	; 3
    222e:	9b 83       	std	Y+3, r25	; 0x03
    2230:	8a 83       	std	Y+2, r24	; 0x02
    2232:	41 15       	cp	r20, r1
    2234:	51 05       	cpc	r21, r1
    2236:	71 f4       	brne	.+28     	; 0x2254 <free+0x7c>
    2238:	d0 93 7d 00 	sts	0x007D, r29
    223c:	c0 93 7c 00 	sts	0x007C, r28
    2240:	20 c0       	rjmp	.+64     	; 0x2282 <free+0xaa>
    2242:	12 96       	adiw	r26, 0x02	; 2
    2244:	8d 91       	ld	r24, X+
    2246:	9c 91       	ld	r25, X
    2248:	13 97       	sbiw	r26, 0x03	; 3
    224a:	ad 01       	movw	r20, r26
    224c:	00 97       	sbiw	r24, 0x00	; 0
    224e:	11 f0       	breq	.+4      	; 0x2254 <free+0x7c>
    2250:	dc 01       	movw	r26, r24
    2252:	d3 cf       	rjmp	.-90     	; 0x21fa <free+0x22>
    2254:	fa 01       	movw	r30, r20
    2256:	d3 83       	std	Z+3, r29	; 0x03
    2258:	c2 83       	std	Z+2, r28	; 0x02
    225a:	21 91       	ld	r18, Z+
    225c:	31 91       	ld	r19, Z+
    225e:	e2 0f       	add	r30, r18
    2260:	f3 1f       	adc	r31, r19
    2262:	ce 17       	cp	r28, r30
    2264:	df 07       	cpc	r29, r31
    2266:	69 f4       	brne	.+26     	; 0x2282 <free+0xaa>
    2268:	88 81       	ld	r24, Y
    226a:	99 81       	ldd	r25, Y+1	; 0x01
    226c:	28 0f       	add	r18, r24
    226e:	39 1f       	adc	r19, r25
    2270:	2e 5f       	subi	r18, 0xFE	; 254
    2272:	3f 4f       	sbci	r19, 0xFF	; 255
    2274:	fa 01       	movw	r30, r20
    2276:	31 83       	std	Z+1, r19	; 0x01
    2278:	20 83       	st	Z, r18
    227a:	8a 81       	ldd	r24, Y+2	; 0x02
    227c:	9b 81       	ldd	r25, Y+3	; 0x03
    227e:	93 83       	std	Z+3, r25	; 0x03
    2280:	82 83       	std	Z+2, r24	; 0x02
    2282:	df 91       	pop	r29
    2284:	cf 91       	pop	r28
    2286:	08 95       	ret

00002288 <itoa>:
    2288:	fb 01       	movw	r30, r22
    228a:	9f 01       	movw	r18, r30
    228c:	e8 94       	clt
    228e:	42 30       	cpi	r20, 0x02	; 2
    2290:	c4 f0       	brlt	.+48     	; 0x22c2 <itoa+0x3a>
    2292:	45 32       	cpi	r20, 0x25	; 37
    2294:	b4 f4       	brge	.+44     	; 0x22c2 <itoa+0x3a>
    2296:	4a 30       	cpi	r20, 0x0A	; 10
    2298:	29 f4       	brne	.+10     	; 0x22a4 <itoa+0x1c>
    229a:	97 fb       	bst	r25, 7
    229c:	1e f4       	brtc	.+6      	; 0x22a4 <itoa+0x1c>
    229e:	90 95       	com	r25
    22a0:	81 95       	neg	r24
    22a2:	9f 4f       	sbci	r25, 0xFF	; 255
    22a4:	64 2f       	mov	r22, r20
    22a6:	77 27       	eor	r23, r23
    22a8:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__udivmodhi4>
    22ac:	80 5d       	subi	r24, 0xD0	; 208
    22ae:	8a 33       	cpi	r24, 0x3A	; 58
    22b0:	0c f0       	brlt	.+2      	; 0x22b4 <itoa+0x2c>
    22b2:	89 5d       	subi	r24, 0xD9	; 217
    22b4:	81 93       	st	Z+, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	00 97       	sbiw	r24, 0x00	; 0
    22ba:	a1 f7       	brne	.-24     	; 0x22a4 <itoa+0x1c>
    22bc:	16 f4       	brtc	.+4      	; 0x22c2 <itoa+0x3a>
    22be:	5d e2       	ldi	r21, 0x2D	; 45
    22c0:	51 93       	st	Z+, r21
    22c2:	10 82       	st	Z, r1
    22c4:	c9 01       	movw	r24, r18
    22c6:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <strrev>

000022ca <strrev>:
    22ca:	dc 01       	movw	r26, r24
    22cc:	fc 01       	movw	r30, r24
    22ce:	67 2f       	mov	r22, r23
    22d0:	71 91       	ld	r23, Z+
    22d2:	77 23       	and	r23, r23
    22d4:	e1 f7       	brne	.-8      	; 0x22ce <strrev+0x4>
    22d6:	32 97       	sbiw	r30, 0x02	; 2
    22d8:	04 c0       	rjmp	.+8      	; 0x22e2 <strrev+0x18>
    22da:	7c 91       	ld	r23, X
    22dc:	6d 93       	st	X+, r22
    22de:	70 83       	st	Z, r23
    22e0:	62 91       	ld	r22, -Z
    22e2:	ae 17       	cp	r26, r30
    22e4:	bf 07       	cpc	r27, r31
    22e6:	c8 f3       	brcs	.-14     	; 0x22da <strrev+0x10>
    22e8:	08 95       	ret

000022ea <_exit>:
    22ea:	f8 94       	cli

000022ec <__stop_program>:
    22ec:	ff cf       	rjmp	.-2      	; 0x22ec <__stop_program>
